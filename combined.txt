Combined output generated on Sat, 05 Jul 2025 16:00:27 BST

---BEGIN_COMMENT---
I am working on a React-based food planning application called Foodinator.
The idea is to create a lightweight, user-friendly app that helps users plan their meals, manage recipes, and organize their food schedule.
This app is built using React with TypeScript and Vite for fast development and optimal performance.
The app is designed to be a Progressive Web App (PWA) that can work offline and be installed on various devices.
We focus on keeping the UI clean and intuitive while providing powerful meal planning functionality.
The app uses local storage to save user data, eliminating the need for server-side storage and ensuring user privacy.
We've implemented a drag-and-drop interface for meal planning to make the user experience smooth and intuitive.
---END_COMMENT---

---BEGIN_COMMENT---
This is our frontend implementation
We've organized the codebase following a component-based architecture with React hooks for state management.
The app uses TypeScript for type safety and better developer experience.
We use SCSS for styling with a modular approach to keep styles organized and maintainable.
The app is built with Vite for fast development and optimized production builds.
We've implemented a responsive design to ensure the app works well on various screen sizes.
The app includes offline functionality with service worker support and offline status indicators.
---END_COMMENT---

---BEGIN_COMMENT---
Main application structure
---END_COMMENT---

Filename: src/App.tsx

```
import { useState, useEffect } from 'react';
import { TabNavigation } from './components/TabNavigation';
import { PlannerTab } from './components/tabs/PlannerTab';
import { ScheduleTab } from './components/tabs/ScheduleTab';
import { GroceryTab } from './components/tabs/GroceryTab';
import { OfflineStatus } from './components/OfflineStatus';
import { useWeeklyPlan } from './hooks/useWeeklyPlan';
import { useGroceryList } from './hooks/useGroceryList';
import { useIngredientSearch } from './hooks/useIngredientSearch';

type TabType = 'planner' | 'grocery' | 'schedule';

function App() {
  // Load active tab from localStorage or default to 'planner'
  const [activeTab, setActiveTab] = useState<TabType>(() => {
    const savedTab = localStorage.getItem('foodinator_active_tab');
    return (savedTab as TabType) || 'planner';
  });

  // Save active tab to localStorage when it changes
  useEffect(() => {
    localStorage.setItem('foodinator_active_tab', activeTab);
  }, [activeTab]);

  // Initialize hooks for state management
  const {
    weeklyPlan,
    mealOrder,
    cookedMeals,
    dragLocked,
    startDate,
    remainingSlots,
    addMeal,
    removeMeal,
    updateMealQuantity,
    resetPlan,
    reorderMeals,
    toggleMealCooked,
    toggleDragLock,
    updateStartDate,
    getSlotDate,
  } = useWeeklyPlan();

  const {
    groceryList,
    toggleItemChecked,
    clearAllCheckedItems,
    isEmpty,
    groupedByMeal,
    notes,
    updateNotes
  } = useGroceryList(weeklyPlan.selectedMeals, mealOrder);

  const {
    searchTerm,
    setSearchTerm,
    selectedIngredients,
    filteredIngredients,
    matchingMeals,
    addIngredient,
    removeIngredient,
    clearIngredients,
  } = useIngredientSearch();

  // Handler functions
  const handleToggleGroceryItem = (ingredientId: string) => {
    toggleItemChecked(ingredientId);
  };

  const handleResetPlan = () => {
    resetPlan();
    clearAllCheckedItems();
  };

  return (
    <div>
      <OfflineStatus />
      
      {/*<header className="app-header">*/}
      {/*  <div className="app-logo"><img src="/foodinator-logo.svg" alt="Foodinator logo"/></div>*/}
      {/*  <button className="burger">*/}
      {/*    <div className="bar"></div>*/}
      {/*    <div className="bar"></div>*/}
      {/*    <div className="bar"></div>*/}
      {/*  </button>*/}
      {/*</header>*/}

      <div className="container">
        {/* Tab Content */}
        {activeTab === 'planner' && (
          <PlannerTab 
            selectedMeals={weeklyPlan.selectedMeals}
            onRemoveMeal={removeMeal}
            onUpdateQuantity={updateMealQuantity}
            totalSlots={weeklyPlan.totalSlots}
            remainingSlots={remainingSlots}
            onAddMeal={addMeal}
            onResetPlan={handleResetPlan}
            searchTerm={searchTerm}
            onSearchChange={setSearchTerm}
            selectedIngredients={selectedIngredients}
            filteredIngredients={filteredIngredients}
            matchingMeals={matchingMeals}
            onAddIngredient={addIngredient}
            onRemoveIngredient={removeIngredient}
            onClearIngredients={clearIngredients}
          />
        )}

        {activeTab === 'schedule' && (
          <ScheduleTab 
            selectedMeals={weeklyPlan.selectedMeals}
            totalSlots={weeklyPlan.totalSlots}
            onReorderMeals={reorderMeals}
            initialMealOrder={mealOrder}
            cookedMeals={cookedMeals}
            dragLocked={dragLocked}
            onToggleMealCooked={toggleMealCooked}
            onToggleDragLock={toggleDragLock}
            startDate={startDate}
            onUpdateStartDate={updateStartDate}
            getSlotDate={getSlotDate}
          />
        )}

        {activeTab === 'grocery' && (
          <GroceryTab 
            groceryItems={groceryList.items}
            onToggleItem={handleToggleGroceryItem}
            isEmpty={isEmpty}
            groupedByMeal={groupedByMeal}
            notes={notes}
            onUpdateNotes={updateNotes}
          />
        )}

        <TabNavigation
          activeTab={activeTab}
          setActiveTab={setActiveTab}
          groceryItemCount={groceryList.items.length}
          isEmpty={isEmpty}
        />
      </div>
    </div>
  );
}

export default App;

```

Filename: src/main.tsx

```
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import './styles/main.scss';
import App from './App.tsx';

// Register service worker for offline functionality
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then((registration) => {
        console.log('SW registered: ', registration);
        
        // Check for updates
        registration.addEventListener('updatefound', () => {
          const newWorker = registration.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                // New content is available, prompt user to refresh
                if (confirm('New version available! Refresh to update?')) {
                  newWorker.postMessage({ type: 'SKIP_WAITING' });
                  window.location.reload();
                }
              }
            });
          }
        });
      })
      .catch((registrationError) => {
        console.log('SW registration failed: ', registrationError);
      });
  });

  // Listen for messages from service worker
  navigator.serviceWorker.addEventListener('message', (event) => {
    console.log('Message from SW:', event.data);
    
    if (event.data.type === 'SYNC_SUCCESS') {
      console.log('Background sync completed:', event.data.data);
      // You could show a notification to the user here
    }
    
    if (event.data.type === 'DATA_UPDATE') {
      console.log('App data updated:', event.data.data);
      // You could trigger a re-render or show a notification here
    }
  });
}

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
);

```

Filename: src/vite-env.d.ts

```ts
/// <reference types="vite/client" />

```

---BEGIN_COMMENT---
Components directory contains all UI components
---END_COMMENT---

Filename: src/components/GroceryList.tsx

```
import React, { useState } from 'react';
import { GroceryItem } from '../models/types';
import { getIngredientById, getMealById } from '../models/data';

interface GroceryListProps {
  groceryItems: GroceryItem[];
  onToggleItem: (ingredientId: string) => void;
  isEmpty: boolean;
  groupedByMeal?: Map<string, GroceryItem[]>;
  notes?: string;
  onUpdateNotes?: (notes: string) => void;
}

export const GroceryList: React.FC<GroceryListProps> = ({
  groceryItems,
  onToggleItem,
  isEmpty,
  groupedByMeal,
  notes = '',
  onUpdateNotes,
}) => {
  const [sortBy, setSortBy] = useState<'name' | 'portions' | 'meal'>('meal');
  const [showChecked, setShowChecked] = useState(true);

  // Filter items based on checked status if needed
  const filteredItems = showChecked 
    ? groceryItems 
    : groceryItems.filter(item => !item.checked);

  // Sort grocery items based on the selected sort option
  const sortedItems = [...filteredItems].sort((a, b) => {
    if (sortBy === 'name') {
      const nameA = getIngredientById(a.ingredientId)?.name || '';
      const nameB = getIngredientById(b.ingredientId)?.name || '';
      return nameA.localeCompare(nameB);
    } else if (sortBy === 'portions') {
      return b.portions - a.portions; // Sort by portions in descending order
    } else {
      // For meal sorting, we'll handle this differently in the render
      return 0;
    }
  });

  const renderGroceryItem = (item: GroceryItem) => {
    const ingredient = getIngredientById(item.ingredientId);
    if (!ingredient) return null;

    return (
      <li key={item.ingredientId}>
        <div className={`checkbox-container ${item.checked ? 'checked' : ''}`}>
          <input
            type="checkbox"
            checked={item.checked}
            onChange={() => onToggleItem(item.ingredientId)}
            id={`ingredient-${item.ingredientId}`}
          />
          <label htmlFor={`ingredient-${item.ingredientId}`}>
            {ingredient.name}
            {item.portions > 1 && (<span className="badge badge-neutral">{item.portions}</span>)}
          </label>
        </div>
      </li>
    );
  };

  return (
    <section>
      <div className="section-header">
        <h2 className="section-title">Groceries</h2>
      </div>
      {!isEmpty && (
        <div className="controls-group">
          <select
            className="form-control"
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as 'name' | 'portions' | 'meal')}
          >
            <option value="name">Sort by Name</option>
            <option value="portions">Sort by Quantity</option>
            <option value="meal">Group by Meal</option>
          </select>
          <button
            className="btn btn-secondary"
            onClick={() => setShowChecked(!showChecked)}
          >
            {showChecked ? 'Hide checked' : 'Show All'}
          </button>
        </div>
      )}

      {isEmpty ? (
        <div className="empty">Your grocery list will appear here once you select meals for your weekly plan.</div>
      ) : (
        <>
          {sortBy === 'meal' && groupedByMeal ? (
            // Group by meal view
            <div>
              {Array.from(groupedByMeal.entries()).map(([mealId, items]) => {
                if (items.length === 0) return null;
                
                // Filter out checked items if needed
                const mealItems = showChecked 
                  ? items 
                  : items.filter(item => !item.checked);
                  
                if (mealItems.length === 0) return null;
                
                const meal = getMealById(mealId);
                if (!meal) return null;
                
                return (
                  <div key={mealId} className="grocery-section">
                    <h3 className="grocery-section__title">
                      {meal.name}
                    </h3>
                    <ul className="grocery-section__list">
                      {mealItems.map(renderGroceryItem)}
                    </ul>
                  </div>
                );
              })}
            </div>
          ) : (
            // Regular list view
            <div className="grocery-section">
              <ul className="grocery-section__list">
                {sortedItems.map(renderGroceryItem)}
              </ul>
            </div>
          )}
          
          {/* Notes section */}
          <div className="grocery-notes">
            <h3 className="grocery-notes__title">Notes</h3>
            <textarea
              className="form-control"
              value={notes}
              onChange={(e) => onUpdateNotes && onUpdateNotes(e.target.value)}
              placeholder="Add notes for your grocery list here..."
              rows={4}
              maxLength={1000}
            />
            <div className="grocery-notes__counter">
              {notes.length}/1000
            </div>
          </div>
        </>
      )}
    </section>
  );
};

```

Filename: src/components/IngredientSearch.tsx

```
import React from 'react';
import { getIngredientById } from '../models/data';
import { Ingredient } from '../models/types';

interface IngredientSearchProps {
  searchTerm: string;
  onSearchChange: (term: string) => void;
  selectedIngredients: string[];
  filteredIngredients: Ingredient[];
  onAddIngredient: (ingredientId: string) => void;
  onRemoveIngredient: (ingredientId: string) => void;
  onClearIngredients: () => void;
}

export const IngredientSearch: React.FC<IngredientSearchProps> = ({
  searchTerm,
  onSearchChange,
  selectedIngredients,
  filteredIngredients,
  onAddIngredient,
  onRemoveIngredient,
  onClearIngredients,
}) => {
  return (
    <div className="card">
      <h2 className="card-title">Search by Ingredients</h2>
      <div className="form-group">
        <label htmlFor="ingredient-search" className="form-label">
          Type to search for ingredients:
        </label>
        <input
          id="ingredient-search"
          type="text"
          className="form-control"
          placeholder="e.g., chicken, rice, avocado..."
          value={searchTerm}
          onChange={(e) => onSearchChange(e.target.value)}
        />
      </div>

      {/* Display search results */}
      {searchTerm.trim() !== '' && filteredIngredients.length > 0 && (
        <div className="search-results">
          <p><strong>Matching ingredients:</strong></p>
          <div>
            {filteredIngredients.map((ingredient) => (
              <span
                key={ingredient.id}
                className="tag"
                onClick={() => onAddIngredient(ingredient.id)}
              >
                {ingredient.name}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Display selected ingredients */}
      {selectedIngredients.length > 0 && (
        <div className="selected-ingredients">
          <div className="flex-between">
            <p><strong>Selected ingredients:</strong></p>
            <button
              className="btn btn-sm btn-danger"
              onClick={onClearIngredients}
            >
              Clear All
            </button>
          </div>
          <div>
            {selectedIngredients.map((ingredientId) => {
              const ingredient = getIngredientById(ingredientId);
              if (!ingredient) return null;

              return (
                <span key={ingredientId} className="tag">
                  {ingredient.name}
                  <span
                    className="close"
                    onClick={() => onRemoveIngredient(ingredientId)}
                  >
                    &times;
                  </span>
                </span>
              );
            })}
          </div>
        </div>
      )}
    </div>
  );
};

```

Filename: src/components/MealItem.tsx

```
import React, { useState } from 'react';
import { Meal } from '../models/types';
// import { getIngredientById } from '../models/data';

interface MealItemProps {
  meal: Meal;
  onAddMeal: (mealId: string, quantity: number) => boolean;
  remainingSlots: number;
}

export const MealItem: React.FC<MealItemProps> = ({ meal, onAddMeal, remainingSlots }) => {
  const [quantity, setQuantity] = useState(1);
  const [error, setError] = useState('');

  const handleIncreaseQuantity = () => {
    if (quantity < remainingSlots) {
      setQuantity(quantity + 1);
      setError('');
    }
  };

  const handleDecreaseQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
      setError('');
    }
  };

  const handleAddMeal = () => {
    if (quantity > remainingSlots) {
      setError(`Only ${remainingSlots} slots remaining`);
      return;
    }

    const success = onAddMeal(meal.id, quantity);
    if (!success) {
      setError('Could not add meal to plan');
    } else {
      setQuantity(1); // Reset quantity after successful add
    }
  };

  // Determine if the Add button should be disabled
  const isAddDisabled = remainingSlots === 0 || quantity > remainingSlots;

  return (
    <div className="card">
      <div className="meal-image">
        {meal?.imageUrl && <img src={meal.imageUrl} alt=""/>}
      </div>
      <div className="card-text">
        <h3 className="card-title">{meal.name}</h3>
        <div className="meal-ingredients">
          {/*<p><strong>Ingredients:</strong></p>*/}
          {/*<div className="ingredient-list">*/}
          {/*  {meal.ingredients.map((ingredientId, i) => (*/}
          {/*    <span key={ingredientId}>*/}
          {/*      {getIngredientById(ingredientId)?.name || ingredientId}*/}
          {/*      {i !== meal.ingredients.length - 1 && <span>, </span>}*/}
          {/*    </span>*/}
          {/*  ))}*/}
          {/*</div>*/}
        </div>
        <div className="controls">
          <div className="quantity-controls">
            <button
              type="button"
              className="btn btn-tertiary btn-sm quantifier"
              onClick={handleDecreaseQuantity}
              disabled={quantity <= 1 || remainingSlots === 0}
            >
              -
            </button>
            <span className="quantity-display">{quantity}</span>
            <button
              type="button"
              className="btn btn-tertiary btn-sm quantifier"
              onClick={handleIncreaseQuantity}
              disabled={quantity >= remainingSlots || remainingSlots === 0}
            >
              +
            </button>
          </div>
          {error && <p className="error-text">{error}</p>}
          <button
            className="btn btn-secondary btn-sm"
            onClick={handleAddMeal}
            disabled={isAddDisabled}
          >Add</button>
        </div>
      </div>
    </div>
  );
};

```

Filename: src/components/MealSchedule.tsx

```
import React from 'react';
import { SelectedMeal } from '../models/types';
import { MealSlot } from './MealSlot';
import { ScheduleControls } from './ScheduleControls';
import { useDragDrop } from '../hooks/useDragDrop';

interface MealScheduleProps {
  selectedMeals: SelectedMeal[];
  totalSlots: number;
  onReorderMeals: (mealSlots: Array<string | null>) => void;
  initialMealOrder?: Array<string | null>;
  cookedMeals?: boolean[];
  dragLocked?: boolean;
  onToggleMealCooked?: (index: number) => void;
  onToggleDragLock?: () => void;
  startDate?: string;
  onUpdateStartDate?: (date: string) => void;
  getSlotDate?: (index: number) => string;
}

export const MealSchedule: React.FC<MealScheduleProps> = ({
  selectedMeals,
  totalSlots,
  onReorderMeals,
  initialMealOrder,
  cookedMeals = Array(7).fill(false),
  dragLocked = true,
  onToggleMealCooked,
  onToggleDragLock,
  startDate,
  onUpdateStartDate,
  getSlotDate,
}) => {
  // Initialize meal slots based on initial order or selected meals
  const initialSlots = (() => {
    // If we have an initial meal order, use it
    if (initialMealOrder && initialMealOrder.some(id => id !== null)) {
      return [...initialMealOrder];
    }

    // Otherwise, initialize slots based on selected meals
    const slots: Array<string | null> = Array(totalSlots).fill(null);
    let slotIndex = 0;

    // Fill slots with meal IDs
    selectedMeals.forEach(({ mealId, quantity }) => {
      for (let i = 0; i < quantity; i++) {
        if (slotIndex < totalSlots) {
          slots[slotIndex] = mealId;
          slotIndex++;
        }
      }
    });

    return slots;
  })();

  // Use the drag and drop hook
  const {
    mealSlots,
    handleDragStart,
    handleDragOver,
    handleDragEnter,
    handleDragEnd,
    handleTouchStart,
    handleTouchMove,
    handleTouchEnd,
    handleDrop
  } = useDragDrop({
    initialSlots,
    dragLocked,
    onReorder: onReorderMeals
  });

  // Handle toggling a meal's cooked status
  const handleToggleCooked = (index: number) => {
    if (onToggleMealCooked) {
      onToggleMealCooked(index);
    }
  };

  return (
    <>
      <div className="section-header">
        <h2 className="section-title">Meal schedule</h2>
      </div>
      <div className="flex-between">
        <div className="badge">
          {mealSlots.filter(slot => slot !== null).length}/{totalSlots}
        </div>
      </div>

      <ScheduleControls
        startDate={startDate || new Date().toISOString().split('T')[0]}
        onUpdateStartDate={onUpdateStartDate || (() => {})}
        dragLocked={dragLocked}
        onToggleDragLock={onToggleDragLock || (() => {})}
      />

      <div className={`meal-slots-container ${dragLocked ? 'drag-locked' : ''}`}>
        {mealSlots.map((mealId, index) => (
          <MealSlot
            key={`slot-${index}`}
            mealId={mealId}
            index={index}
            isCooked={cookedMeals[index]}
            isDraggable={!dragLocked}
            dateLabel={getSlotDate ? getSlotDate(index) : ''}
            onDragStart={handleDragStart}
            onDragOver={handleDragOver}
            onDragEnter={handleDragEnter}
            onDragEnd={handleDragEnd}
            onDrop={handleDrop}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
            onToggleCooked={handleToggleCooked}
          />
        ))}
      </div>
    </>
  );
};

```

Filename: src/components/MealSelector.tsx

```
import React from 'react';
import { MealItem } from './MealItem';
import { meals } from '../models/data';
import { getIngredientById } from '../models/data';
import { Ingredient } from '../models/types';

interface MealSelectorProps {
  onAddMeal: (mealId: string, quantity: number) => boolean;
  remainingSlots: number;
  searchResults?: string[]; // Optional array of meal IDs that match search criteria
  // Search functionality props
  searchTerm?: string;
  onSearchChange?: (term: string) => void;
  selectedIngredients?: string[];
  filteredIngredients?: Ingredient[];
  onAddIngredient?: (ingredientId: string) => void;
  onRemoveIngredient?: (ingredientId: string) => void;
  onClearIngredients?: () => void;
}

export const MealSelector: React.FC<MealSelectorProps> = ({ 
  onAddMeal, 
  remainingSlots,
  searchResults,
  searchTerm = "",
  onSearchChange,
  selectedIngredients = [],
  filteredIngredients = [],
  onAddIngredient,
  onRemoveIngredient,
  onClearIngredients
}) => {
  // Filter meals based on search results when ingredients are selected
  const displayedMeals = selectedIngredients.length > 0
    ? (searchResults || []).filter(mealId => meals.some(meal => meal.id === mealId))
        .map(mealId => meals.find(meal => meal.id === mealId)!)
    : meals;

  // Show "No meals found" only if we have selected ingredients but no matching meals
  const showNoResultsMessage = selectedIngredients.length > 0 && displayedMeals.length === 0;

  return (
    <section>
      <div className="section-header">
        <h2 className="section-title">Meals</h2>
      </div>
      
      {/* Search functionality */}
      {onSearchChange && (
        <div className="form-group">
          <input
            type="text"
            className="form-control"
            placeholder="Search"
            value={searchTerm}
            onChange={(e) => onSearchChange(e.target.value)}
          />
        </div>
      )}

      {/* Display search results for ingredients */}
      {searchTerm.trim() !== "" && filteredIngredients.length > 0 && onAddIngredient && (
        <div className="search-results">
          <div>
            {filteredIngredients.map((ingredient) => (
              <span
                key={ingredient.id}
                className="tag"
                onClick={() => onAddIngredient(ingredient.id)}
              >
                {ingredient.name}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* Display selected ingredients */}
      {selectedIngredients.length > 0 && onRemoveIngredient && onClearIngredients && (
        <div className="selected-ingredients">
          <div className="flex-between">
            <p><strong>Selected ingredients:</strong></p>
            <button
              className="btn btn-sm btn-danger"
              onClick={onClearIngredients}
            >
              Clear All
            </button>
          </div>
          <div>
            {selectedIngredients.map((ingredientId) => {
              const ingredient = getIngredientById(ingredientId);
              if (!ingredient) return null;

              return (
                <span key={ingredientId} className="tag">
                  {ingredient.name}
                  <span
                    className="close"
                    onClick={() => onRemoveIngredient(ingredientId)}
                  >
                    &times;
                  </span>
                </span>
              );
            })}
          </div>
        </div>
      )}

      {remainingSlots === 0 ? (
        <div className="alert alert--success">
          <strong>All slots filled!</strong> Your weekly plan is complete.
        </div>
      ) : (
        <div className="alert">
          <strong>{remainingSlots} slots</strong> remaining to fill.
        </div>
      )}
      
      {showNoResultsMessage ? (
        <div className="empty">No meals found matching your criteria.</div>
      ) : (
        <div className="meal-grid">
          {displayedMeals.map((meal) => (
            <MealItem
              key={meal.id}
              meal={meal}
              onAddMeal={onAddMeal}
              remainingSlots={remainingSlots}
            />
          ))}
        </div>
      )}
    </section>
  );
};

```

Filename: src/components/MealSlot.tsx

```
import React from 'react';
import { getMealById } from '../models/data';

interface MealSlotProps {
  mealId: string | null;
  index: number;
  isCooked: boolean;
  isDraggable: boolean;
  dateLabel: string;
  onDragStart: (index: number) => void;
  onDragOver: (e: React.DragEvent) => void;
  onDragEnter: (index: number) => void;
  onDragEnd: () => void;
  onDrop: (index: number) => void;
  onTouchStart: (index: number, e: React.TouchEvent) => void;
  onTouchMove: (e: React.TouchEvent) => void;
  onTouchEnd: () => void;
  onToggleCooked: (index: number) => void;
}

export const MealSlot: React.FC<MealSlotProps> = ({
  mealId,
  index,
  isCooked,
  isDraggable,
  dateLabel,
  onDragStart,
  onDragOver,
  onDragEnter,
  onDragEnd,
  onDrop,
  onTouchStart,
  onTouchMove,
  onTouchEnd,
  onToggleCooked,
}) => {
  const meal = mealId ? getMealById(mealId) : null;

  return (
    <div 
      className={`meal-slot ${!meal ? 'meal-slot--empty' : ''} ${meal && isCooked ? 'cooked' : ''}`}
      data-index={index}
      draggable={!!meal && isDraggable}
      onDragStart={() => onDragStart(index)}
      onDragOver={onDragOver}
      onDragEnter={() => onDragEnter(index)}
      onDragEnd={onDragEnd}
      onDrop={() => onDrop(index)}
      // Touch events for mobile support
      onTouchStart={(e) => onTouchStart(index, e)}
      onTouchMove={onTouchMove}
      onTouchEnd={onTouchEnd}
    >
      {/* Date label for the slot */}
      <div className="meal-slot__date-label">
        {dateLabel}
      </div>

      {meal ? (
        <>
          <div className="meal-slot__header">
            <h3 className="meal-slot__title">
              {meal.name}
            </h3>
            <div 
              className={`meal-cooked-toggle ${isCooked ? 'cooked' : ''}`}
              onClick={(e) => {
                e.stopPropagation();
                onToggleCooked(index);
              }}
            >
              {isCooked ? '✓ Cooked' : 'Mark Cooked'}
            </div>
          </div>
        </>
      ) : (
        <div className="empty-slot-content">
          Empty Slot
        </div>
      )}
    </div>
  );
};

```

Filename: src/components/OfflineStatus.tsx

```
import React from 'react';
import { useOffline } from '../hooks/useOffline';

interface OfflineStatusProps {
  className?: string;
}

export const OfflineStatus: React.FC<OfflineStatusProps> = ({ className = '' }) => {
  const { isOnline, isOfflineReady, hasUpdate, checkForUpdates, forceUpdate } = useOffline();

  if (isOnline && !hasUpdate) {
    return null;
  }

  return (
    <div className={`offline-status ${className}`}>
      {!isOnline && (
        <div className="offline-indicator">
          <span className="offline-icon">📱</span>
          <span className="offline-text">
            {isOfflineReady ? 'Offline - Using cached data' : 'Offline - Limited functionality'}
          </span>
        </div>
      )}
      
      {hasUpdate && (
        <div className="update-available">
          <span className="update-icon">🔄</span>
          <span className="update-text">Update available</span>
          <button 
            className="update-button"
            onClick={forceUpdate}
            type="button"
          >
            Update Now
          </button>
        </div>
      )}
      
      {isOnline && (
        <button 
          className="check-updates-button"
          onClick={checkForUpdates}
          type="button"
          title="Check for updates"
        >
          Check for Updates
        </button>
      )}
    </div>
  );
};

export default OfflineStatus;

```

Filename: src/components/PlanMealItem.tsx

```
import React from 'react';
import { getMealById } from '../models/data';

interface PlanMealItemProps {
  mealId: string;
  quantity: number;
  onRemoveMeal: (mealId: string) => void;
  onUpdateQuantity: (mealId: string, quantity: number) => boolean;
  availableSlots: number;
}

export const PlanMealItem: React.FC<PlanMealItemProps> = ({
  mealId,
  quantity,
  onRemoveMeal,
  onUpdateQuantity,
  availableSlots,
}) => {
  const meal = getMealById(mealId);
  if (!meal) return null;

  const handleIncreaseQuantity = () => {
    onUpdateQuantity(mealId, quantity + 1);
  };

  const handleDecreaseQuantity = () => {
    if (quantity > 1) {
      onUpdateQuantity(mealId, quantity - 1);
    }
  };

  return (
    <div className="meal-item">
      <div className="meal-item__header">
        <div>
          <h3 className="meal-item__title">{meal.name}</h3>
        </div>
        <div className="meal-actions">
          <div className="quantity-controls">
            <button 
              type="button"
              className="btn btn-sm"
              onClick={handleDecreaseQuantity}
              disabled={quantity <= 1}
            >-</button>
            <span className="quantity-display">{quantity}</span>
            <button 
              type="button"
              className="btn btn-sm"
              onClick={handleIncreaseQuantity}
              disabled={quantity >= availableSlots}
            >+</button>
          </div>
          <button
            className="btn btn-danger btn-sm"
            onClick={() => onRemoveMeal(mealId)}
          >✕</button>
        </div>
      </div>
    </div>
  );
};
```

Filename: src/components/ScheduleControls.tsx

```
import React from 'react';

interface ScheduleControlsProps {
  startDate: string;
  onUpdateStartDate: (date: string) => void;
  dragLocked: boolean;
  onToggleDragLock: () => void;
}

export const ScheduleControls: React.FC<ScheduleControlsProps> = ({
  startDate,
  onUpdateStartDate,
  dragLocked,
  onToggleDragLock,
}) => {
  return (
    <div className="schedule-controls">
      <div className="schedule-controls__date-group">
        <label htmlFor="start-date">
          Start Date:
        </label>
        <input
          id="start-date"
          type="date"
          value={startDate || new Date().toISOString().split('T')[0]}
          onChange={(e) => onUpdateStartDate?.(e.target.value)}
          className="date-input"
        />
      </div>
      <button 
        className={`btn btn-sm ${dragLocked ? 'btn-secondary' : 'btn-tertiary'}`}
        onClick={onToggleDragLock}
        title={dragLocked ? "Unlock drag and drop" : "Lock drag and drop"}
      >
        {dragLocked ? "🔒 Locked" : "🔓 Unlocked"}
      </button>
    </div>
  );
};
```

Filename: src/components/TabNavigation.tsx

```
import React from 'react';

type TabType = 'planner' | 'grocery' | 'schedule';

interface TabNavigationProps {
  activeTab: TabType;
  setActiveTab: (tab: TabType) => void;
  groceryItemCount?: number;
  isEmpty?: boolean;
}

export const TabNavigation: React.FC<TabNavigationProps> = ({
  activeTab,
  setActiveTab,
  groceryItemCount = 0,
  isEmpty = true,
}) => {
  return (
    <div className="tabs">
      <button
        className={`tab ${activeTab === 'planner' && 'tab-active'}`}
        onClick={() => setActiveTab('planner')}
      >
        Planner
      </button>
      <button
        className={`tab ${activeTab === 'schedule' && 'tab-active'}`}
        onClick={() => setActiveTab('schedule')}
      >
        Schedule
      </button>
      <button
        className={`tab ${activeTab === 'grocery' && 'tab-active'}`}
        onClick={() => setActiveTab('grocery')}
      >
        Groceries
        {!isEmpty && (
          <span className="badge badge-count">
            {groceryItemCount}
          </span>
        )}
      </button>
    </div>
  );
};

```

Filename: src/components/WeeklyPlanDisplay.tsx

```
import React, { useState, useEffect } from 'react';
import { SelectedMeal } from '../models/types';
import { PlanMealItem } from './PlanMealItem';

interface WeeklyPlanDisplayProps {
  selectedMeals: SelectedMeal[];
  onRemoveMeal: (mealId: string) => void;
  onUpdateQuantity: (mealId: string, quantity: number) => boolean;
  totalSlots: number;
}

export const WeeklyPlanDisplay: React.FC<WeeklyPlanDisplayProps> = ({
  selectedMeals,
  onRemoveMeal,
  onUpdateQuantity,
  totalSlots,
}) => {
  // Local state to track the current quantities of meals
  const [localQuantities, setLocalQuantities] = useState<Record<string, number>>({});

  // Initialize local quantities from selectedMeals
  useEffect(() => {
    // Create a new object to store the quantities
    const quantities: Record<string, number> = {};
    // Populate it with the quantities from selectedMeals
    selectedMeals.forEach(meal => {
      quantities[meal.mealId] = meal.quantity;
    });
    // Update the local state with the new quantities
    setLocalQuantities(quantities);
  }, [selectedMeals]);

  // Calculate local used slots based on local quantities
  // This is the sum of all quantities in the localQuantities object
  const localUsedSlots = Object.values(localQuantities).reduce((total, quantity) => total + quantity, 0);

  const handleIncreaseQuantity = (mealId: string, currentQuantity: number) => {
    // Calculate remaining slots for this meal
    // Total slots - (used slots - current quantity of this meal)
    const availableSlots = totalSlots - (localUsedSlots - currentQuantity);

    if (currentQuantity < availableSlots) {
      const success = onUpdateQuantity(mealId, currentQuantity + 1);
      if (success) {
        // Update local quantity
        setLocalQuantities(prev => ({
          ...prev,
          [mealId]: currentQuantity + 1
        }));
      }
    }
  };

  const handleDecreaseQuantity = (mealId: string, currentQuantity: number) => {
    if (currentQuantity > 1) {
      const success = onUpdateQuantity(mealId, currentQuantity - 1);
      if (success) {
        // Update local quantity immediately to reflect the change
        setLocalQuantities(prev => ({
          ...prev,
          [mealId]: currentQuantity - 1
        }));
      }
    }
  };

  // Calculate empty slots based on local used slots
  const emptySlots = totalSlots - localUsedSlots;

  return (
    <section>
      <div className="section-header">
        <div className="flex-between">
          <h2 className="section-title">Dinner plan</h2>
          <div className="badge">{localUsedSlots}/{totalSlots}</div>
        </div>
      </div>

      {selectedMeals.length === 0 ? (
        <div className="empty">No meals selected yet. Start by adding meals from the list below.</div>
      ) : (
        <div>
          <div className="meal-list">
            {selectedMeals.map(({ mealId, quantity }) => (
              <PlanMealItem
                key={mealId}
                mealId={mealId}
                quantity={quantity}
                onRemoveMeal={onRemoveMeal}
                onUpdateQuantity={(id, qty) => {
                  const success = onUpdateQuantity(id, qty);
                  if (success && qty > quantity) {
                    handleIncreaseQuantity(id, quantity);
                  } else if (success && qty < quantity) {
                    handleDecreaseQuantity(id, quantity);
                  }
                  return success;
                }}
                availableSlots={totalSlots - (localUsedSlots - quantity)}
              />
            ))}
          </div>
        </div>
      )}
    </section>
  );
};

```

---BEGIN_COMMENT---
Tab components for different app sections
---END_COMMENT---

Filename: src/components/tabs/GroceryTab.tsx

```
import React from 'react';
import { GroceryList } from '../GroceryList';
import { GroceryItem } from '../../models/types';

interface GroceryTabProps {
  groceryItems: GroceryItem[];
  onToggleItem: (ingredientId: string) => void;
  isEmpty: boolean;
  groupedByMeal: Map<string, GroceryItem[]>;
  notes: string;
  onUpdateNotes: (notes: string) => void;
}

export const GroceryTab: React.FC<GroceryTabProps> = ({
  groceryItems,
  onToggleItem,
  isEmpty,
  groupedByMeal,
  notes,
  onUpdateNotes,
}) => {
  return (
    <div>
      <GroceryList
        groceryItems={groceryItems}
        onToggleItem={onToggleItem}
        isEmpty={isEmpty}
        groupedByMeal={groupedByMeal}
        notes={notes}
        onUpdateNotes={onUpdateNotes}
      />
    </div>
  );
};
```

Filename: src/components/tabs/PlannerTab.tsx

```
import React from 'react';
import { WeeklyPlanDisplay } from '../WeeklyPlanDisplay';
import { MealSelector } from '../MealSelector';
import { SelectedMeal, Ingredient, Meal } from '../../models/types';

interface PlannerTabProps {
  selectedMeals: SelectedMeal[];
  onRemoveMeal: (mealId: string) => void;
  onUpdateQuantity: (mealId: string, newQuantity: number) => boolean;
  totalSlots: number;
  remainingSlots: number;
  onAddMeal: (mealId: string, quantity: number) => boolean;
  onResetPlan: () => void;
  // Search functionality props
  searchTerm: string;
  onSearchChange: (term: string) => void;
  selectedIngredients: string[];
  filteredIngredients: Ingredient[];
  matchingMeals: Meal[];
  onAddIngredient: (ingredientId: string) => void;
  onRemoveIngredient: (ingredientId: string) => void;
  onClearIngredients: () => void;
}

export const PlannerTab: React.FC<PlannerTabProps> = ({
  selectedMeals,
  onRemoveMeal,
  onUpdateQuantity,
  totalSlots,
  remainingSlots,
  onAddMeal,
  onResetPlan,
  searchTerm,
  onSearchChange,
  selectedIngredients,
  filteredIngredients,
  matchingMeals,
  onAddIngredient,
  onRemoveIngredient,
  onClearIngredients,
}) => {
  return (
    <div>
      <div className="section-header">
        <div>
          {selectedMeals.length > 0 && (
            <>
              <button className="btn btn-danger" onClick={onResetPlan}>
                Reset
              </button>
            </>
          )}
        </div>
      </div>

      <div className="app-view">
        <WeeklyPlanDisplay
          selectedMeals={selectedMeals}
          onRemoveMeal={onRemoveMeal}
          onUpdateQuantity={onUpdateQuantity}
          totalSlots={totalSlots}
        />

        <MealSelector
          onAddMeal={onAddMeal}
          remainingSlots={remainingSlots}
          searchResults={matchingMeals.map(meal => meal.id)}
          searchTerm={searchTerm}
          onSearchChange={onSearchChange}
          selectedIngredients={selectedIngredients}
          filteredIngredients={filteredIngredients}
          onAddIngredient={onAddIngredient}
          onRemoveIngredient={onRemoveIngredient}
          onClearIngredients={onClearIngredients}
        />
      </div>
    </div>
  );
};

```

Filename: src/components/tabs/ScheduleTab.tsx

```
import React from 'react';
import { MealSchedule } from '../MealSchedule';
import { SelectedMeal } from '../../models/types';

interface ScheduleTabProps {
  selectedMeals: SelectedMeal[];
  totalSlots: number;
  onReorderMeals: (mealSlots: Array<string | null>) => void;
  initialMealOrder: Array<string | null>;
  cookedMeals: boolean[];
  dragLocked: boolean;
  onToggleMealCooked: (index: number) => void;
  onToggleDragLock: () => void;
  startDate: string;
  onUpdateStartDate: (date: string) => void;
  getSlotDate: (index: number) => string;
}

export const ScheduleTab: React.FC<ScheduleTabProps> = ({
  selectedMeals,
  totalSlots,
  onReorderMeals,
  initialMealOrder,
  cookedMeals,
  dragLocked,
  onToggleMealCooked,
  onToggleDragLock,
  startDate,
  onUpdateStartDate,
  getSlotDate,
}) => {
  return (
    <div>
      <MealSchedule
        selectedMeals={selectedMeals}
        totalSlots={totalSlots}
        onReorderMeals={onReorderMeals}
        initialMealOrder={initialMealOrder}
        cookedMeals={cookedMeals}
        dragLocked={dragLocked}
        onToggleMealCooked={onToggleMealCooked}
        onToggleDragLock={onToggleDragLock}
        startDate={startDate}
        onUpdateStartDate={onUpdateStartDate}
        getSlotDate={getSlotDate}
      />
    </div>
  );
};
```

---BEGIN_COMMENT---
Custom React hooks for state management and business logic
---END_COMMENT---

Filename: src/hooks/useDragDrop.ts

```ts
import { useState, useRef, useCallback } from 'react';

interface UseDragDropOptions {
  initialSlots: Array<string | null>;
  dragLocked: boolean;
  onReorder: (newSlots: Array<string | null>) => void;
}

export const useDragDrop = ({ initialSlots, dragLocked, onReorder }: UseDragDropOptions) => {
  // Create an array of meal slots
  const [mealSlots, setMealSlots] = useState<Array<string | null>>(initialSlots);

  // Track the meal being dragged and touch positions
  const draggedMeal = useRef<number | null>(null);
  const touchStartX = useRef<number>(0);
  const touchStartY = useRef<number>(0);
  const touchCurrentSlot = useRef<number | null>(null);

  // Handle drag start
  const handleDragStart = useCallback((index: number) => {
    if (mealSlots[index] === null) return; // Don't allow dragging empty slots
    if (dragLocked) return; // Don't allow dragging if locked

    draggedMeal.current = index;

    // Add a class to the element being dragged
    const slotElements = document.querySelectorAll('.meal-slot');
    if (slotElements[index]) {
      slotElements[index].classList.add('dragging');
    }
  }, [mealSlots, dragLocked]);

  // Handle drag over
  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault(); // Necessary to allow dropping
  }, []);

  // Handle drag enter
  const handleDragEnter = useCallback((index: number) => {
    if (draggedMeal.current === null) return;
    if (dragLocked) return;

    // Add a visual indicator for the target slot
    document.querySelectorAll('.meal-slot').forEach(el => {
      el.classList.remove('drop-target');
    });

    const slotElements = document.querySelectorAll('.meal-slot');
    if (slotElements[index]) {
      slotElements[index].classList.add('drop-target');
    }
  }, [dragLocked]);

  // Handle drag end
  const handleDragEnd = useCallback(() => {
    // Remove visual indicators
    document.querySelectorAll('.meal-slot').forEach(el => {
      el.classList.remove('dragging');
      el.classList.remove('drop-target');
    });

    // Reset the dragged meal if no drop occurred
    draggedMeal.current = null;
  }, []);

  // Handle touch start
  const handleTouchStart = useCallback((index: number, e: React.TouchEvent) => {
    if (mealSlots[index] === null) return; // Don't allow dragging empty slots
    if (dragLocked) return; // Don't allow dragging if locked

    draggedMeal.current = index;
    touchStartX.current = e.touches[0].clientX;
    touchStartY.current = e.touches[0].clientY;
    touchCurrentSlot.current = index;

    // Add a class to the element being dragged
    // Use the same approach as handleDragStart for consistency
    const slotElements = document.querySelectorAll('.meal-slot');
    if (slotElements[index]) {
      slotElements[index].classList.add('dragging');
    }
  }, [mealSlots, dragLocked]);

  // Handle touch move
  const handleTouchMove = useCallback((e: React.TouchEvent) => {
    if (draggedMeal.current === null) return;
    // Note: We can't use preventDefault() here because touch events are passive by default
    // We're using touch-action: none in CSS to prevent all scrolling during drag operations

    const touch = e.touches[0];

    // Calculate the distance moved from the start position
    const deltaX = touch.clientX - touchStartX.current;
    const deltaY = touch.clientY - touchStartY.current;

    // Only proceed if the user has moved the touch point significantly
    // This helps prevent accidental triggers
    if (Math.abs(deltaX) < 5 && Math.abs(deltaY) < 5) return;

    // Get all elements at the touch point
    const elements = document.elementsFromPoint(touch.clientX, touch.clientY);

    // Find the meal slot element under the touch point
    // We need to check both the element itself and its parent elements
    // to ensure we find the correct meal slot
    let slotElement = null;

    // First, try to find a direct meal-slot element
    for (const element of elements) {
      if (element.classList.contains('meal-slot')) {
        slotElement = element;
        break;
      }
    }

    // If no direct meal-slot found, check parent elements
    if (!slotElement) {
      for (const element of elements) {
        let parent = element.parentElement;
        while (parent) {
          if (parent.classList.contains('meal-slot')) {
            slotElement = parent;
            break;
          }
          parent = parent.parentElement;
        }
        if (slotElement) break;
      }
    }

    if (slotElement) {
      // Get the index from the data attribute
      const index = parseInt(slotElement.getAttribute('data-index') || '-1');
      if (index !== -1 && index !== touchCurrentSlot.current) {
        touchCurrentSlot.current = index;

        // Add a visual indicator for the target slot - same as handleDragEnter
        document.querySelectorAll('.meal-slot').forEach(el => {
          el.classList.remove('drop-target');
        });
        slotElement.classList.add('drop-target');
      }
    }
  }, []);

  // Handle drop
  const handleDrop = useCallback((index: number) => {
    // Validate input parameters
    if (typeof index !== 'number' || index < 0 || index >= mealSlots.length) {
      console.error('Invalid index in handleDrop:', index);
      return;
    }

    // Check if we have a valid source
    if (draggedMeal.current === null) {
      console.error('No meal being dragged in handleDrop');
      return;
    }

    // No change if dropping on the same slot
    if (draggedMeal.current === index) {
      console.log('Dropping on same slot, no change needed');
      draggedMeal.current = null; // Reset state
      return;
    }

    // Create a new array of meal slots
    const newMealSlots = [...mealSlots];

    // Get the dragged meal and source index
    const sourceIndex = draggedMeal.current;
    const draggedMealId = newMealSlots[sourceIndex];
    const targetMealId = newMealSlots[index];

    // Check if the target slot is empty or occupied
    if (targetMealId === null) {
      // Target slot is empty, simply move the meal
      newMealSlots[index] = draggedMealId;
      newMealSlots[sourceIndex] = null;
    } else {
      // Target slot is occupied, swap the meals
      newMealSlots[sourceIndex] = targetMealId;
      newMealSlots[index] = draggedMealId;
    }

    // Update the meal slots
    setMealSlots(newMealSlots);

    // Notify parent component
    onReorder(newMealSlots);

    // Reset the dragged meal
    draggedMeal.current = null;
  }, [mealSlots, onReorder]);

  // Handle touch end
  const handleTouchEnd = useCallback(() => {
    // Get the current values before we reset anything
    const sourceIndex = draggedMeal.current;
    const targetIndex = touchCurrentSlot.current;

    // Remove visual indicators
    document.querySelectorAll('.meal-slot').forEach(el => {
      el.classList.remove('dragging');
      el.classList.remove('drop-target');
    });

    // Check if we have valid source and target indices
    if (sourceIndex === null) {
      return; // No meal was being dragged
    }

    // If no target slot was found or it's the same as the source, do nothing
    if (targetIndex === null || sourceIndex === targetIndex) {
      // Reset state
      draggedMeal.current = null;
      touchCurrentSlot.current = null;
      return;
    }

    // Perform the swap - this will also reset draggedMeal.current
    handleDrop(targetIndex);

    // Reset touch tracking
    touchCurrentSlot.current = null;
  }, [handleDrop]);

  return {
    mealSlots,
    handleDragStart,
    handleDragOver,
    handleDragEnter,
    handleDragEnd,
    handleTouchStart,
    handleTouchMove,
    handleTouchEnd,
    handleDrop
  };
};

```

Filename: src/hooks/useGroceryList.ts

```ts
import { useMemo, useState, useEffect } from 'react';
import { GroceryItem, GroceryList } from '../models/types';
import { getMealById } from '../models/data';

// Type for storing checked state in localStorage
interface CheckedState {
  [ingredientId: string]: boolean;
}

// Storage keys
const CHECKED_ITEMS_KEY = 'foodinator_checked_items';
const GROCERY_NOTES_KEY = 'foodinator_grocery_notes';

export const useGroceryList = (selectedMeals: { mealId: string; quantity: number }[], mealOrder?: Array<string | null>) => {
  // Load checked state from localStorage
  const loadCheckedState = (): CheckedState => {
    const savedState = localStorage.getItem(CHECKED_ITEMS_KEY);
    return savedState ? JSON.parse(savedState) : {};
  };

  // Load notes from localStorage
  const loadNotes = (): string => {
    const savedNotes = localStorage.getItem(GROCERY_NOTES_KEY);
    return savedNotes || '';
  };

  // State to track checked items and notes
  const [checkedItems, setCheckedItems] = useState<CheckedState>(loadCheckedState);
  const [notes, setNotes] = useState<string>(loadNotes);

  // Generate the grocery list based on the selected meals and checked state
  const groceryList = useMemo<GroceryList>(() => {
    const ingredientMap = new Map<string, number>();
    const mealIngredientMap = new Map<string, Map<string, number>>();

    // Calculate the total portions needed for each ingredient
    selectedMeals.forEach(({ mealId, quantity }) => {
      const meal = getMealById(mealId);
      if (!meal) return;

      // Track ingredients per meal for grouping
      const mealMap = mealIngredientMap.get(mealId) || new Map<string, number>();
      
      meal.ingredients.forEach((ingredientId) => {
        // Update total ingredients
        const currentPortions = ingredientMap.get(ingredientId) || 0;
        ingredientMap.set(ingredientId, currentPortions + quantity);
        
        // Update meal-specific ingredients
        mealMap.set(ingredientId, quantity);
      });
      
      mealIngredientMap.set(mealId, mealMap);
    });

    // Convert the map to an array of grocery items
    const items: GroceryItem[] = Array.from(ingredientMap.entries()).map(
      ([ingredientId, portions]) => ({
        ingredientId,
        portions,
        checked: checkedItems[ingredientId] || false,
        // Store which meals use this ingredient for grouping
        meals: Array.from(mealIngredientMap.entries())
          .filter(([, ingredients]) => ingredients.has(ingredientId))
          .map(([mealId]) => mealId)
      })
    );

    return { 
      items,
      notes 
    };
  }, [selectedMeals, checkedItems, notes]);

  // Save checked state to localStorage whenever it changes
  useEffect(() => {
    localStorage.setItem(CHECKED_ITEMS_KEY, JSON.stringify(checkedItems));
  }, [checkedItems]);

  // Save notes to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem(GROCERY_NOTES_KEY, notes);
  }, [notes]);

  // Clear checked items for ingredients that are no longer in any meal
  useEffect(() => {
    const currentIngredientIds = new Set(groceryList.items.map(item => item.ingredientId));
    const checkedIngredientIds = Object.keys(checkedItems);
    
    // Find checked ingredients that are no longer in the grocery list
    const ingredientsToRemove = checkedIngredientIds.filter(
      ingredientId => !currentIngredientIds.has(ingredientId)
    );
    
    if (ingredientsToRemove.length > 0) {
      setCheckedItems(prev => {
        const newCheckedItems = { ...prev };
        ingredientsToRemove.forEach(ingredientId => {
          delete newCheckedItems[ingredientId];
        });
        return newCheckedItems;
      });
    }
  }, [groceryList.items, checkedItems]);

  // Toggle the checked status of a grocery item
  const toggleItemChecked = (ingredientId: string) => {
    setCheckedItems(prev => ({
      ...prev,
      [ingredientId]: !prev[ingredientId]
    }));
  };

  // Clear all checked items (useful for reset functionality)
  const clearAllCheckedItems = () => {
    setCheckedItems({});
  };

  // Check if all grocery items are checked
  const allItemsChecked = groceryList.items.length > 0 && 
    groceryList.items.every((item) => item.checked);

  // Check if the grocery list is empty
  const isEmpty = groceryList.items.length === 0;

  // Group items by meal, ordered according to the meal schedule
  const groupedByMeal = useMemo(() => {
    const result = new Map<string, GroceryItem[]>();
    
    // Initialize with all meals
    selectedMeals.forEach(({ mealId }) => {
      result.set(mealId, []);
    });
    
    // Add items to their respective meals
    groceryList.items.forEach(item => {
      // Find the first meal that uses this ingredient
      const firstMealId = item.meals && item.meals.length > 0 ? item.meals[0] : null;
      
      if (firstMealId) {
        const mealItems = result.get(firstMealId) || [];
        mealItems.push(item);
        result.set(firstMealId, mealItems);
      }
    });
    
    // If we have a meal order, reorder the map to match the schedule order
    if (mealOrder && mealOrder.length > 0) {
      const orderedResult = new Map<string, GroceryItem[]>();
      
      // Get unique meal IDs in the order they appear in the schedule
      const uniqueMealIds: string[] = [];
      mealOrder.forEach(mealId => {
        if (mealId && !uniqueMealIds.includes(mealId)) {
          uniqueMealIds.push(mealId);
        }
      });
      
      // Add meals in schedule order
      uniqueMealIds.forEach(mealId => {
        if (result.has(mealId)) {
          orderedResult.set(mealId, result.get(mealId)!);
        }
      });
      
      // Add any remaining meals that weren't in the schedule (shouldn't happen normally)
      result.forEach((items, mealId) => {
        if (!orderedResult.has(mealId)) {
          orderedResult.set(mealId, items);
        }
      });
      
      return orderedResult;
    }
    
    return result;
  }, [groceryList.items, selectedMeals, mealOrder]);

  // Update notes
  const updateNotes = (newNotes: string) => {
    setNotes(newNotes);
  };

  return {
    groceryList,
    toggleItemChecked,
    clearAllCheckedItems,
    allItemsChecked,
    isEmpty,
    groupedByMeal,
    notes,
    updateNotes
  };
};

```

Filename: src/hooks/useIngredientSearch.ts

```ts
import { useState, useMemo, useCallback, useEffect } from 'react';
import { ingredients } from '../models/data';
import { meals } from '../models/data';

const STORAGE_KEY = 'foodinator_selected_ingredients';

export const useIngredientSearch = () => {
  // Load selected ingredients from localStorage
  const loadSelectedIngredients = (): string[] => {
    const savedIngredients = localStorage.getItem(STORAGE_KEY);
    return savedIngredients ? JSON.parse(savedIngredients) : [];
  };

  const [searchTerm, setSearchTerm] = useState('');
  const [selectedIngredients, setSelectedIngredients] = useState<string[]>(loadSelectedIngredients);

  // Save selected ingredients to localStorage whenever they change
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(selectedIngredients));
  }, [selectedIngredients]);

  // Filter ingredients based on search term
  const filteredIngredients = useMemo(() => {
    if (!searchTerm.trim()) return [];

    return ingredients.filter(
      (ingredient) =>
        ingredient.name.toLowerCase().includes(searchTerm.toLowerCase()) &&
        !selectedIngredients.includes(ingredient.id)
    );
  }, [searchTerm, selectedIngredients]);

  // Find meals that contain all selected ingredients
  const matchingMeals = useMemo(() => {
    if (selectedIngredients.length === 0) return [];

    return meals.filter((meal) =>
      selectedIngredients.every((ingredientId) =>
        meal.ingredients.includes(ingredientId)
      )
    );
  }, [selectedIngredients]);

  // Add an ingredient to the selected list
  const addIngredient = useCallback((ingredientId: string) => {
    setSelectedIngredients((prev) => [...prev, ingredientId]);
    setSearchTerm(''); // Clear search term after selection
  }, []);

  // Remove an ingredient from the selected list
  const removeIngredient = useCallback((ingredientId: string) => {
    setSelectedIngredients((prev) =>
      prev.filter((id) => id !== ingredientId)
    );
  }, []);

  // Clear all selected ingredients
  const clearIngredients = useCallback(() => {
    setSelectedIngredients([]);
    setSearchTerm('');
  }, []);

  return {
    searchTerm,
    setSearchTerm,
    selectedIngredients,
    filteredIngredients,
    matchingMeals,
    addIngredient,
    removeIngredient,
    clearIngredients,
  };
};

```

Filename: src/hooks/useLocalStorage.ts

```ts
import { useState, useEffect, useCallback } from 'react';

/**
 * A custom hook for managing state that is persisted in localStorage
 * @param key The localStorage key to store the value under
 * @param initialValue The initial value to use if no value is found in localStorage
 * @returns A stateful value and a function to update it
 */
export function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T | ((val: T) => T)) => void] {
  // Get the initial value from localStorage or use the provided initialValue
  const [storedValue, setStoredValue] = useState<T>(() => {
    try {
      const item = localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  });

  // Update localStorage when the state changes
  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(storedValue));
      
      // Also cache in service worker for offline access
      if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
        navigator.serviceWorker.controller.postMessage({
          type: 'CACHE_UPDATE',
          url: `/cache/localStorage/${key}`,
          data: storedValue
        });
      }
    } catch (error) {
      console.error(`Error writing to localStorage key "${key}":`, error);
    }
  }, [key, storedValue]);

  return [storedValue, setStoredValue];
}

/**
 * Enhanced localStorage hook with offline sync capabilities
 */
export function useOfflineLocalStorage<T>(key: string, initialValue: T) {
  const [storedValue, setStoredValue] = useLocalStorage(key, initialValue);
  const [lastSyncTime, setLastSyncTime] = useState<number>(0);
  const [hasPendingChanges, setHasPendingChanges] = useState(false);

  // Track when data changes for sync purposes
  const setValue = useCallback((value: T | ((val: T) => T)) => {
    setStoredValue(value);
    setHasPendingChanges(true);
    setLastSyncTime(Date.now());
  }, [setStoredValue]);

  // Mark as synced when online
  const markAsSynced = useCallback(() => {
    setHasPendingChanges(false);
  }, []);

  // Get sync status
  const getSyncStatus = useCallback(() => {
    return {
      lastSyncTime,
      hasPendingChanges,
      isStale: Date.now() - lastSyncTime > 5 * 60 * 1000 // 5 minutes
    };
  }, [lastSyncTime, hasPendingChanges]);

  return {
    value: storedValue,
    setValue,
    markAsSynced,
    getSyncStatus
  };
}

```

Filename: src/hooks/useMealPlan.ts

```ts
import { useCallback, useMemo } from 'react';
import { useLocalStorage } from './useLocalStorage';
import { WeeklyPlan } from '../models/types';

const STORAGE_KEY = 'foodinator_weekly_plan';
const TOTAL_SLOTS = 7; // 7 days in a week

export const useMealPlan = () => {
  // Weekly plan state
  const [weeklyPlan, setWeeklyPlan] = useLocalStorage<WeeklyPlan>(
    STORAGE_KEY,
    { selectedMeals: [], totalSlots: TOTAL_SLOTS }
  );

  // Calculate used and remaining slots
  const usedSlots = useMemo(() => {
    return weeklyPlan.selectedMeals.reduce((total, meal) => total + meal.quantity, 0);
  }, [weeklyPlan.selectedMeals]);

  const remainingSlots = useMemo(() => {
    return weeklyPlan.totalSlots - usedSlots;
  }, [weeklyPlan.totalSlots, usedSlots]);

  // Add a meal to the weekly plan
  const addMeal = useCallback((mealId: string, quantity: number): boolean => {
    if (quantity <= 0 || quantity > remainingSlots) return false;

    setWeeklyPlan(prevPlan => {
      // Check if the meal is already in the plan
      const existingMeal = prevPlan.selectedMeals.find(meal => meal.mealId === mealId);

      if (existingMeal) {
        // Update the existing meal's quantity
        return {
          ...prevPlan,
          selectedMeals: prevPlan.selectedMeals.map(meal => 
            meal.mealId === mealId 
              ? { ...meal, quantity: meal.quantity + quantity } 
              : meal
          )
        };
      } else {
        // Add the new meal to the plan
        return {
          ...prevPlan,
          selectedMeals: [
            ...prevPlan.selectedMeals,
            { mealId, quantity }
          ]
        };
      }
    });

    return true; // Successfully added meal
  }, [remainingSlots, setWeeklyPlan]);

  // Remove a meal from the weekly plan
  const removeMeal = useCallback((mealId: string) => {
    setWeeklyPlan(prevPlan => ({
      ...prevPlan,
      selectedMeals: prevPlan.selectedMeals.filter(meal => meal.mealId !== mealId)
    }));
  }, [setWeeklyPlan]);

  // Update a meal's quantity in the weekly plan
  const updateMealQuantity = useCallback((mealId: string, newQuantity: number): boolean => {
    if (newQuantity <= 0) {
      // If the new quantity is 0 or less, remove the meal
      removeMeal(mealId);
      return true;
    }

    // Calculate how many more slots this would use
    const meal = weeklyPlan.selectedMeals.find(m => m.mealId === mealId);
    if (!meal) return false;

    const additionalSlots = newQuantity - meal.quantity;
    if (additionalSlots > remainingSlots) return false; // Not enough slots available

    setWeeklyPlan(prevPlan => ({
      ...prevPlan,
      selectedMeals: prevPlan.selectedMeals.map(meal => 
        meal.mealId === mealId ? { ...meal, quantity: newQuantity } : meal
      )
    }));

    return true; // Successfully updated quantity
  }, [weeklyPlan.selectedMeals, remainingSlots, removeMeal, setWeeklyPlan]);

  // Reset the weekly plan
  const resetPlan = useCallback(() => {
    setWeeklyPlan({ selectedMeals: [], totalSlots: TOTAL_SLOTS });
  }, [setWeeklyPlan]);

  return {
    weeklyPlan,
    usedSlots,
    remainingSlots,
    addMeal,
    removeMeal,
    updateMealQuantity,
    resetPlan,
  };
};

```

Filename: src/hooks/useMealSchedule.ts

```ts
import { useCallback } from 'react';
import { useLocalStorage } from './useLocalStorage';

const MEAL_ORDER_KEY = 'foodinator_meal_order';
const MEAL_INSTANCES_KEY = 'foodinator_meal_instances';
const COOKED_MEALS_KEY = 'foodinator_cooked_meals';
const DRAG_LOCK_KEY = 'foodinator_drag_lock';
const START_DATE_KEY = 'foodinator_start_date';

interface UseMealScheduleOptions {
  totalSlots: number;
}

export const useMealSchedule = ({ totalSlots }: UseMealScheduleOptions) => {
  // Meal order - which meal is in which slot
  const [mealOrder, setMealOrder] = useLocalStorage<Array<string | null>>(
    MEAL_ORDER_KEY, 
    Array(totalSlots).fill(null)
  );

  // Meal instances - unique IDs for each meal instance in each slot
  const [mealInstances, setMealInstances] = useLocalStorage<Array<string | null>>(
    MEAL_INSTANCES_KEY,
    Array(totalSlots).fill(null)
  );

  // Cooked meals - which meal instances have been cooked
  const [cookedMeals, setCookedMeals] = useLocalStorage<Record<string, boolean>>(
    COOKED_MEALS_KEY,
    {}
  );

  // Drag lock - whether drag and drop is locked
  const [dragLocked, setDragLocked] = useLocalStorage<boolean>(
    DRAG_LOCK_KEY,
    true // Default to locked for better mobile experience
  );

  // Start date - the date of the first meal in the schedule
  const [startDate, setStartDate] = useLocalStorage<string>(
    START_DATE_KEY,
    new Date().toISOString().split('T')[0] // Default to today's date
  );

  // Generate unique instance ID for a meal
  const generateMealInstanceId = useCallback((): string => {
    return `instance_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }, []);

  // Reorder meals in the schedule
  const reorderMeals = useCallback((newOrder: Array<string | null>) => {
    // Ensure mealInstances is always an array
    const currentInstances = Array.isArray(mealInstances) ? mealInstances : Array(totalSlots).fill(null);
    
    // For reordering (like drag and drop), preserve instances when possible
    const newInstances: Array<string | null> = Array(totalSlots).fill(null);
    const usedInstances = new Set<string>();
    
    // First pass: try to match meals that haven't moved or have clear mappings
    newOrder.forEach((newMealId, newIndex) => {
      if (newMealId) {
        // Look for the same meal in the same position first
        if (mealOrder[newIndex] === newMealId && currentInstances[newIndex] && !usedInstances.has(currentInstances[newIndex]!)) {
          newInstances[newIndex] = currentInstances[newIndex];
          usedInstances.add(currentInstances[newIndex]!);
        }
      }
    });
    
    // Second pass: match remaining meals with available instances
    newOrder.forEach((newMealId, newIndex) => {
      if (newMealId && !newInstances[newIndex]) {
        // Find an unused instance of this meal
        for (let oldIndex = 0; oldIndex < mealOrder.length; oldIndex++) {
          if (mealOrder[oldIndex] === newMealId && 
              currentInstances[oldIndex] && 
              !usedInstances.has(currentInstances[oldIndex]!)) {
            newInstances[newIndex] = currentInstances[oldIndex];
            usedInstances.add(currentInstances[oldIndex]!);
            break;
          }
        }
        
        // If no existing instance found, create a new one
        if (!newInstances[newIndex]) {
          newInstances[newIndex] = generateMealInstanceId();
        }
      }
    });
    
    setMealOrder(newOrder);
    setMealInstances(newInstances);
  }, [mealOrder, mealInstances, setMealOrder, setMealInstances, generateMealInstanceId, totalSlots]);

  // Toggle whether a meal instance has been cooked
  const toggleMealCooked = useCallback((slotIndex: number) => {
    // Ensure mealInstances is always an array
    const currentInstances = Array.isArray(mealInstances) ? mealInstances : Array(totalSlots).fill(null);
    const instanceId = currentInstances[slotIndex];
    if (!instanceId) return;

    setCookedMeals(prev => ({
      ...prev,
      [instanceId]: !prev[instanceId]
    }));
  }, [mealInstances, setCookedMeals, totalSlots]);

  // Toggle whether drag and drop is locked
  const toggleDragLock = useCallback(() => {
    setDragLocked(prev => !prev);
  }, [setDragLocked]);

  // Update the start date
  const updateStartDate = useCallback((newStartDate: string) => {
    setStartDate(newStartDate);
  }, [setStartDate]);

  // Get the date for a specific slot
  const getSlotDate = useCallback((slotIndex: number) => {
    const date = new Date(startDate);
    date.setDate(date.getDate() + slotIndex);
    return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });
  }, [startDate]);

  // Ensure meal instances are created for existing meals
  const ensureMealInstances = useCallback(() => {
    // Ensure mealInstances is always an array
    const currentInstances = Array.isArray(mealInstances) ? mealInstances : Array(totalSlots).fill(null);
    const newInstances = [...currentInstances];
    let hasChanges = false;

    for (let i = 0; i < totalSlots; i++) {
      if (mealOrder[i] && !currentInstances[i]) {
        newInstances[i] = generateMealInstanceId();
        hasChanges = true;
      } else if (!mealOrder[i] && currentInstances[i]) {
        newInstances[i] = null;
        hasChanges = true;
      }
    }

    if (hasChanges) {
      setMealInstances(newInstances);
    }
  }, [mealOrder, mealInstances, setMealInstances, generateMealInstanceId, totalSlots]);

  // Call ensureMealInstances whenever mealOrder changes
  ensureMealInstances();

  // Convert to boolean array for cooked meals
  const cookedMealsArray = Array(totalSlots).fill(false).map((_, index) => {
    // Ensure mealInstances is always an array
    const currentInstances = Array.isArray(mealInstances) ? mealInstances : Array(totalSlots).fill(null);
    const instanceId = currentInstances[index];
    if (!instanceId) return false;
    
    return !!cookedMeals[instanceId];
  });

  return {
    mealOrder,
    cookedMeals: cookedMealsArray,
    dragLocked,
    startDate,
    reorderMeals,
    toggleMealCooked,
    toggleDragLock,
    updateStartDate,
    getSlotDate,
  };
};

```

Filename: src/hooks/useOffline.ts

```ts
import { useState, useEffect, useCallback } from 'react';

interface OfflineState {
  isOnline: boolean;
  isOfflineReady: boolean;
  hasUpdate: boolean;
}

interface OfflineActions {
  checkForUpdates: () => Promise<void>;
  forceUpdate: () => void;
  clearCache: () => Promise<void>;
}

/**
 * Custom hook for managing offline functionality and network status
 */
export function useOffline(): OfflineState & OfflineActions {
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [isOfflineReady, setIsOfflineReady] = useState(false);
  const [hasUpdate, setHasUpdate] = useState(false);

  // Handle online/offline status changes
  useEffect(() => {
    const handleOnline = () => {
      setIsOnline(true);
      console.log('App is now online');
    };

    const handleOffline = () => {
      setIsOnline(false);
      console.log('App is now offline');
    };

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  // Check if service worker is ready and app is cached
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(() => {
        setIsOfflineReady(true);
        console.log('App is ready for offline use');
      });

      // Listen for service worker updates
      navigator.serviceWorker.addEventListener('controllerchange', () => {
        setHasUpdate(true);
      });
    }
  }, []);

  // Check for app updates
  const checkForUpdates = useCallback(async () => {
    if ('serviceWorker' in navigator) {
      try {
        const registration = await navigator.serviceWorker.getRegistration();
        if (registration) {
          await registration.update();
          console.log('Checked for updates');
        }
      } catch (error) {
        console.error('Failed to check for updates:', error);
      }
    }
  }, []);

  // Force update the app
  const forceUpdate = useCallback(() => {
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({ type: 'SKIP_WAITING' });
      window.location.reload();
    }
  }, []);

  // Clear all caches
  const clearCache = useCallback(async () => {
    if ('caches' in window) {
      try {
        const cacheNames = await caches.keys();
        await Promise.all(
          cacheNames.map(cacheName => caches.delete(cacheName))
        );
        console.log('All caches cleared');
        
        // Unregister service worker
        if ('serviceWorker' in navigator) {
          const registrations = await navigator.serviceWorker.getRegistrations();
          await Promise.all(
            registrations.map(registration => registration.unregister())
          );
        }
        
        // Reload the page
        window.location.reload();
      } catch (error) {
        console.error('Failed to clear cache:', error);
      }
    }
  }, []);

  return {
    isOnline,
    isOfflineReady,
    hasUpdate,
    checkForUpdates,
    forceUpdate,
    clearCache
  };
}

/**
 * Hook for managing background sync operations
 */
export function useBackgroundSync() {
  const [pendingSyncs, setPendingSyncs] = useState<string[]>([]);

  // Register background sync
  const registerSync = useCallback(async (tag: string) => {
    if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {
      try {
        const registration = await navigator.serviceWorker.ready;
        // Type assertion for background sync API
        await (registration as ServiceWorkerRegistration & { sync: { register: (tag: string) => Promise<void> } }).sync.register(tag);
        setPendingSyncs(prev => [...prev, tag]);
        console.log('Background sync registered:', tag);
      } catch (error) {
        console.error('Failed to register background sync:', error);
      }
    }
  }, []);

  // Listen for sync completion messages
  useEffect(() => {
    if ('serviceWorker' in navigator) {
      const handleMessage = (event: MessageEvent) => {
        if (event.data.type === 'SYNC_SUCCESS') {
          const syncTag = event.data.data.type;
          setPendingSyncs(prev => prev.filter(tag => !tag.includes(syncTag)));
        }
      };

      navigator.serviceWorker.addEventListener('message', handleMessage);
      return () => {
        navigator.serviceWorker.removeEventListener('message', handleMessage);
      };
    }
  }, []);

  return {
    pendingSyncs,
    registerSync
  };
}

/**
 * Hook for caching data in service worker
 */
export function useDataCache() {
  const cacheData = useCallback(async (key: string, data: unknown) => {
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
      navigator.serviceWorker.controller.postMessage({
        type: 'CACHE_UPDATE',
        url: `/cache/${key}`,
        data: data
      });
    }
  }, []);

  const getCachedData = useCallback(async (key: string) => {
    if ('caches' in window) {
      try {
        const cache = await caches.open('foodinator-data-v1');
        const response = await cache.match(`/cache/${key}`);
        if (response) {
          return await response.json();
        }
      } catch (error) {
        console.error('Failed to get cached data:', error);
      }
    }
    return null;
  }, []);

  return {
    cacheData,
    getCachedData
  };
}

```

Filename: src/hooks/useWeeklyPlan.ts

```ts
import { useCallback, useEffect } from 'react';
import { useMealPlan } from './useMealPlan';
import { useMealSchedule } from './useMealSchedule';

const TOTAL_SLOTS = 7; // 7 days in a week

/**
 * A hook that combines meal planning and scheduling functionality
 * This is a facade that combines the useMealPlan and useMealSchedule hooks
 * for backward compatibility with the existing codebase
 */
export const useWeeklyPlan = () => {
  // Use the meal plan hook for managing selected meals
  const {
    weeklyPlan,
    usedSlots,
    remainingSlots,
    addMeal,
    removeMeal,
    updateMealQuantity,
    resetPlan: resetMealPlan,
  } = useMealPlan();

  // Use the meal schedule hook for managing meal order and cooked status
  const {
    mealOrder,
    cookedMeals,
    dragLocked,
    startDate,
    reorderMeals,
    toggleMealCooked,
    toggleDragLock,
    updateStartDate,
    getSlotDate,
  } = useMealSchedule({ totalSlots: TOTAL_SLOTS });

  // Update meal order when meals are added or removed
  useEffect(() => {
    // Generate a new meal order based on the selected meals
    const newOrder: Array<string | null> = Array(TOTAL_SLOTS).fill(null);

    // If we have an existing order, try to preserve it
    if (mealOrder.some(id => id !== null)) {
      // First, identify which meals are still in the plan
      const validMealIds = new Set(weeklyPlan.selectedMeals.map(meal => meal.mealId));

      // Create a map to track how many instances of each meal we need
      const requiredCounts: Record<string, number> = {};
      weeklyPlan.selectedMeals.forEach(({ mealId, quantity }) => {
        requiredCounts[mealId] = quantity;
      });

      // Create a map to track how many instances of each meal we've placed
      const placedCounts: Record<string, number> = {};

      // First pass: preserve existing meal positions if they're still valid
      for (let i = 0; i < TOTAL_SLOTS; i++) {
        const mealId = mealOrder[i];
        if (mealId !== null && validMealIds.has(mealId)) {
          // This meal is still in the plan
          placedCounts[mealId] = (placedCounts[mealId] || 0) + 1;

          // Only keep this meal in this position if we haven't placed too many
          if (placedCounts[mealId] <= requiredCounts[mealId]) {
            newOrder[i] = mealId;
          }
        }
      }

      // Second pass: fill in any remaining quantities in the first available slots
      weeklyPlan.selectedMeals.forEach(({ mealId, quantity }) => {
        const placed = placedCounts[mealId] || 0;
        const remaining = quantity - placed;

        if (remaining > 0) {
          // Find the first available slots and fill them
          let added = 0;
          for (let i = 0; i < TOTAL_SLOTS && added < remaining; i++) {
            if (newOrder[i] === null) {
              newOrder[i] = mealId;
              added++;
            }
          }
        }
      });
    } else {
      // No existing order, just fill in the slots sequentially
      let slotIndex = 0;
      weeklyPlan.selectedMeals.forEach(({ mealId, quantity }) => {
        for (let i = 0; i < quantity && slotIndex < TOTAL_SLOTS; i++) {
          newOrder[slotIndex] = mealId;
          slotIndex++;
        }
      });
    }

    // Only update if the order has actually changed
    if (JSON.stringify(newOrder) !== JSON.stringify(mealOrder)) {
      reorderMeals(newOrder);
    }
  }, [weeklyPlan.selectedMeals, mealOrder, reorderMeals]);

  // Reset both meal plan and schedule
  const resetPlan = useCallback(() => {
    resetMealPlan();
    // The meal order will be updated automatically by the effect above
  }, [resetMealPlan]);

  return {
    weeklyPlan,
    mealOrder,
    cookedMeals,
    dragLocked,
    startDate,
    usedSlots,
    remainingSlots,
    addMeal,
    removeMeal,
    updateMealQuantity,
    resetPlan,
    reorderMeals,
    toggleMealCooked,
    toggleDragLock,
    updateStartDate,
    getSlotDate,
  };
};

```

---BEGIN_COMMENT---
Data models and types
---END_COMMENT---

Filename: src/models/data.ts

```ts
import { Ingredient, Meal } from './types';

export const ingredients: Ingredient[] = [
  { id: 'chicken', name: 'Chicken' },
  { id: 'lamb', name: 'Lamb' },
  { id: 'ground-beef', name: 'Ground beef' },
  { id: 'diced-beef', name: 'Diced beef' },
  { id: 'pork-fillet', name: 'Pork fillet' },
  { id: 'broccoli', name: 'Broccoli' },
  { id: 'mushrooms', name: 'Mushrooms' },
  { id: 'creme-fraiche', name: 'Creme fraiche' },
  { id: 'rice', name: 'Rice' },
  { id: 'chickpeas', name: 'Chickpeas' },
  { id: 'pasta', name: 'Pasta' },
  { id: 'tomato-sauce', name: 'Tomato sauce' },
  { id: 'steaks', name: 'Steaks' },
  { id: 'white-beans', name: 'White beans' },
  { id: 'black-beans', name: 'Black beans' },
  { id: 'garlic', name: 'Garlic' },
  { id: 'rosemary', name: 'Rosemary' },
  { id: 'brown-bread', name: 'Brown bread' },
  { id: 'avocados', name: 'Avocados' },
  { id: 'hummus', name: 'Hummus' },
  { id: 'lime', name: 'Lime' },
  { id: 'lemon', name: 'Lemon' },
  { id: 'eggs', name: 'Eggs' },
  { id: 'fish', name: 'Fish' },
  { id: 'potatoes', name: 'Potatoes' },
  { id: 'shallots', name: 'Shallots' },
  { id: 'bell-pepper', name: 'Bell pepper' },
  { id: 'milk', name: 'Milk' },
  { id: 'parmesan', name: 'Parmesan' },
  { id: 'grana-padano', name: 'Grana Padano' },
  { id: 'lardons', name: 'Lardons' },
  { id: 'asparagus', name: 'Asparagus' },
  { id: 'white-wine', name: 'White wine' },
  { id: 'new-potatoes', name: 'New potatoes' },
  { id: 'green-veg', name: 'Green veg' },
  { id: 'mint-sauce', name: 'Mint sauce' },
  { id: 'pickled-peppers', name: 'Pickled peppers' },
  { id: 'fennel-seeds', name: 'Fennel seeds' },
  { id: 'cheese', name: 'Cheese' },
  { id: 'buns', name: 'Buns' },
  { id: 'sauce', name: 'Sauce' },
  { id: 'lettuce', name: 'Lettuce' },
  { id: 'chard', name: 'Chard' },
];

export const meals: Meal[] = [
  {
    id: 'creamy-chic-broc',
    name: 'Creamy Chic Broc',
    imageUrl: './img-meals/chic-broc.jpg',
    ingredients: ['chicken', 'broccoli', 'mushrooms', 'creme-fraiche', 'rice'],
  },
  {
    id: 'pasta-bolognese',
    name: 'Pasta bolognese',
    imageUrl: './img-meals/pasta-bolognese.jpg',
    ingredients: ['pasta', 'tomato-sauce', 'ground-beef'],
  },
  {
    id: 'pasta-carbonara',
    name: 'Pasta carbonara',
    imageUrl: './img-meals/pasta-carbonara.jpg',
    ingredients: ['pasta', 'eggs', 'grana-padano', "parmesan", 'lardons', 'mushrooms'],
  },
  {
    id: 'fishy-pasta',
    name: 'Fishy pasta',
    ingredients: ['pasta', 'fish', 'creme-fraiche', "shallots", 'asparagus', 'white-wine', 'lemon'],
  },
  {
    id: 'epic-beans-and-steak',
    name: 'Epic beans and steak',
    imageUrl: './img-meals/epic-beans-steak.jpg',
    ingredients: ['steaks', 'white-beans', 'mushrooms', 'garlic', 'rosemary'],
  },
  {
    id: 'mexican-style-bean-casserole',
    name: 'Mexican-style bean casserole',
    ingredients: ['eggs', 'black-beans', 'avocados', 'bell-pepper', 'lime', 'diced-beef'],
  },
  {
    id: 'avocado-toast',
    name: 'Avocado toast',
    imageUrl: './img-meals/avocado-toasts.jpg',
    ingredients: ['brown-bread', 'avocados', 'lime', 'eggs', 'hummus', 'mint-sauce'],
  },
  {
    id: 'fish-n-mash',
    name: 'Fish n mash',
    imageUrl: './img-meals/fisn-n-mash.jpg',
    ingredients: ['fish', 'potatoes', 'shallots', 'bell-pepper', 'milk'],
  },
  {
    id: 'pan-seared-lamb',
    name: 'Pan-seared lamb',
    ingredients: ['lamb', 'potatoes', 'green-veg', 'mint-sauce'],
  },
  {
    id: 'burgers',
    name: 'Burgers',
    imageUrl: './img-meals/burgers.jpg',
    ingredients: ['buns', 'sauce', 'ground-beef', 'cheese', 'lettuce', 'potatoes'],
  },
  {
    id: 'chickpea-chard-pork',
    name: 'Chickpea chard pork',
    imageUrl: './img-meals/chickpea-chard-pork.jpg',
    ingredients: ['pork-fillet', 'chickpeas', 'chard', 'pickled-peppers', 'fennel-seeds'],
  },
];

export const getIngredientById = (id: string): Ingredient | null => {
  return ingredients.find(ingredient => ingredient.id === id) || null;
};

export const getMealById = (id: string): Meal | null => {
  return meals.find(meal => meal.id === id) || null;
};

```

Filename: src/models/types.ts

```ts
export interface Ingredient {
  id: string;
  name: string;
}

export interface Meal {
  id: string;
  name: string;
  imageUrl?: string;
  ingredients: string[]; // Array of ingredient IDs
}

export interface SelectedMeal {
  mealId: string;
  quantity: number;
}

export interface WeeklyPlan {
  selectedMeals: SelectedMeal[];
  totalSlots: number;
  startDate?: string; // ISO date string for the start of the meal schedule
}


export interface GroceryItem {
  ingredientId: string;
  portions: number;
  checked: boolean;
  meals?: string[]; // Array of meal IDs that use this ingredient
}

export interface GroceryList {
  items: GroceryItem[];
  notes?: string;
}

```

---BEGIN_COMMENT---
Utility functions
---END_COMMENT---

---BEGIN_COMMENT---
Styling with SCSS - modular approach
---END_COMMENT---

Filename: src/styles/main.scss

```scss
// ===========================
// MAIN SASS FILE
// ===========================

// Use order is important!
// 1. Variables first (so they can be used everywhere)
// 2. Mixins second (so they can use variables and be used by components)
// 3. Base styles
// 4. Components
// 5. Layout last (so it can override component styles if needed)

// Core
@use "variables" as *;
@use "mixins" as *;
@use "base";

// Components
@use "components/cards";
@use "components/buttons";
@use "components/forms";
@use "components/badges";
@use "components/tags";
@use "components/checkboxes";
@use "components/alerts";
@use "components/meal-components";
@use "components/offline-status";

// Layout
@use "layout/grid";
@use "layout/flex";
@use "layout/app-layout";
@use "layout/forms-layout";
@use "layout/tabs";
@use "layout/schedule";
@use "layout/responsive";

```

Filename: src/styles/_base.scss

```scss
// ===========================
// BASE STYLES
// ===========================

@use "variables" as *;

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  font-family: $font-family-base;
  line-height: $line-height-base;
  -webkit-font-smoothing: antialiased;
  color: $gray-1;
  margin: 0;
  padding: 0;
  button, input {
    font-family: inherit;
  }
  h1, h2, h3, h4, h5, h6 {
    font-weight: $font-weight-semibold;
  }
  img {
    max-width: 100%;
    object-fit: cover;
  }
}

// Container
.container {
  min-height: 100dvh;
  max-width: $container-max-width;
  margin: 0 auto;
  padding: $spacing-xl $spacing-xl $spacing-xxl;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

// App Header
.app-header {
  position: relative;
  background-color: $primary-color;
  color: white;
  padding: $spacing-sm $spacing-xl;
  text-align: center;
  margin-bottom: $spacing-lg;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  .app-logo {
    height: 30px;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    img {
      height: 100%;
    }
  }
  .burger {
    border-radius: 1000px;
    border: 1px solid rgba(#fff, .4);
    background-color: rgba(#fff, .1);
    height: 40px;
    width: 40px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 5px;
    cursor: pointer;
    transition: .2s;
    &:hover {
      background-color: rgba(#fff, .2);
    }
    .bar {
      width: 20px;
      height: 2px;
      border-radius: $border-radius-max;
      background-color: #fff;
      &:first-of-type, &:last-of-type {
        width: 15px;
      }
    }
  }
}

```

Filename: src/styles/_mixins.scss

```scss
// ===========================
// MIXINS
// ===========================

@use "sass:color";
@use "variables" as *;

// Media Queries
// ===========================
@mixin mobile {
  @media (max-width: #{$breakpoint-xs - 1px}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$breakpoint-md - 1px}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: $breakpoint-md) {
    @content;
  }
}

@mixin large-desktop {
  @media (min-width: $breakpoint-lg) {
    @content;
  }
}

// Button Mixins
// ===========================
@mixin button-base {
  display: inline-block;
  border: 1px solid transparent;
  border-radius: $border-radius-max;
  padding: $spacing-sm $spacing-lg;
  font-size: $font-size-base;
  cursor: pointer;
  transition: all $transition-base;
  text-decoration: none;
  text-align: center;
  text-wrap: nowrap;
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  &:active {
    transform: translateY(1px);
  }
}

@mixin button-variant($bg-color, $hover-color: darken($bg-color, 10%)) {
  background-color: $bg-color;
  color: white;
  &:hover:not(:disabled) {
    background-color: $hover-color;
  }
  &:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba($bg-color, 0.3);
  }
}

@mixin button-size($padding-y, $padding-x, $font-size) {
  padding: $padding-y $padding-x;
  font-size: $font-size;
}

// Card Mixins
// ===========================
@mixin card-base {
  display: flex;
  flex-direction: column;
  overflow: hidden;
  background-color: $card-background;
  border-radius: $border-radius-xl;
  box-shadow: $shadow-md;
  transition: box-shadow $transition-base;
}

// Form Mixins
// ===========================
@mixin form-control {
  padding: $spacing-sm $spacing-md;
  border: 1px solid $gray-4;
  border-radius: $border-radius-lg;
  font-size: $font-size-base;
  font-family: $font-family-base;
  color: $gray-1;
  transition: border-color $transition-base, box-shadow $transition-base;
  &:focus {
    outline: none;
    border-color: $primary-color;
    box-shadow: 0 0 0 3px rgba($primary-color, 0.2);
  }
  &:disabled {
    background-color: color.adjust($border-color, $lightness: 10%);
    cursor: not-allowed;
  }
  &::placeholder {
    color: $gray-4;
  }
}

// Layout Mixins
// ===========================
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin grid-auto-fit($min-width: 300px, $gap: $grid-gap) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

@mixin grid-auto-fill($min-width: 300px, $gap: $grid-gap) {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));
  gap: $spacing-md;
}

// Typography Mixins
// ===========================
@mixin text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin text-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Utility Mixins
// ===========================
@mixin clearfix {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  margin: -1px !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
  white-space: nowrap !important;
  border: 0 !important;
}

// Animation Mixins
// ===========================
@mixin fade-in($duration: $transition-base) {
  animation: fadeIn $duration ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@mixin slide-up($duration: $transition-base) {
  animation: slideUp $duration ease-out;
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

// Drag and Drop Mixins
// ===========================
@mixin draggable {
  cursor: grab;
  transition: transform $transition-base, opacity $transition-base, box-shadow $transition-base;

  &:active {
    cursor: grabbing;
  }

  &.dragging {
    opacity: 0.7;
    transform: scale(1.02);
    z-index: $z-index-modal;
    box-shadow: $shadow-xl;
  }
}

@mixin drop-target {
  &.drop-target {
    border: 2px dashed $primary-color !important;
    background-color: rgba($primary-color, 0.1) !important;
  }
}

// Component Mixins
// ===========================
@mixin meal-item-base {
  border: 1px solid $border-color;
  border-radius: $border-radius-md;
  padding: $spacing-lg;
  background-color: $card-background;
  box-shadow: $shadow-md;
}

@mixin meal-cooked-toggle {
  cursor: pointer;
  padding: $spacing-xs $spacing-sm;
  border-radius: $border-radius-sm;
  background-color: #f0f0f0;
  color: $gray-1;
  font-size: 0.8rem;
  font-weight: $font-weight-semibold;
  user-select: none;
  transition: all $transition-base;

  &:hover {
    transform: scale(1.05);
  }

  &.cooked {
    background-color: $success-color;
    color: white;
    box-shadow: $shadow-sm;
  }
}

@mixin section-header {
  @include flex-between;
  margin-bottom: $spacing-md;
}

```

Filename: src/styles/_variables.scss

```scss
// ===========================
// VARIABLES
// ===========================

//Imports
@use "sass:color";
@import url('https://fonts.googleapis.com/css2?family=Parkinsans:wght@300..800&display=swap');

// Colors
// ===========================
// Primary Colors
$primary-color: #DE6052;
$secondary-color: #FFDDAB;

// Neutral colours
$gray-1: #3F3B3B;
$gray-2: #554E4F;
$gray-3: #938A8B;
$gray-4: #BAB5B5;
$gray-5: #E2DFDF;
$gray-6: #F5F4F4;

// Background colours
$background-color: $gray-6;
$card-background: #ffffff;

// Border colours
$border-color: #e0e0e0;
$border-light: #f0f0f0;

// Status colours
$success-color: #69990F;
$danger-color: #E50060;
$warning-color: #BF9F00;
$info-color: #1592A6;

// Hover states
$primary-hover: color.adjust($primary-color, $lightness: -10%, $saturation: -10%);
$secondary-hover: color.adjust($secondary-color, $lightness: -10%);
$danger-hover: color.adjust($danger-color, $lightness: -10%);

// Typography
// ===========================
$font-family-base: "Parkinsans", sans-serif;
$font-size-base: 1rem;
$font-size-sm: 0.875rem;
$font-size-md: 1.125rem;
$font-size-lg: 1.25rem;
$font-size-xl: 1.5rem;
$font-size-xxl: 2rem;

$font-weight-normal: 400;
$font-weight-medium: 500;
$font-weight-semibold: 600;
$font-weight-bold: 700;

$line-height-base: 1.6;
$line-height-sm: 1.4;
$line-height-lg: 1.8;

// Spacing
// ===========================
$spacing-xs: 4px;
$spacing-sm: 8px;
$spacing-md: 12px;
$spacing-lg: 16px;
$spacing-xl: 20px;
$spacing-xxl: 24px;
$spacing-xxxl: 30px;

// Border radius
// ===========================
$border-radius-sm: 5px;
$border-radius-md: 10px;
$border-radius-lg: 15px;
$border-radius-xl: 20px;
$border-radius-max: 1000px;

// Shadows
// ===========================
$shadow-sm: (0 1px 3px rgba($gray-1, 0.1), 0 1px 2px rgba($gray-1, 0.06));
$shadow-md: (0 2px 8px -2px rgba($gray-1, 0.2), 0 1px 4px -2px rgba($gray-1, 0.12));
$shadow-lg: (0 4px 16px -4px rgba($gray-1, 0.16), 0 1px 6px -2px rgba($gray-1, 0.08));
$shadow-xl: (0 8px 24px -2px rgba($gray-1, 0.12), 0 4px 8px -2px rgba($gray-1, 0.06));

// Transitions
// ===========================
$transition-fast: 0.1s ease;
$transition-base: 0.2s ease;
$transition-slow: 0.5s ease;

// Breakpoints
// ===========================
$breakpoint-xs: 480px;
$breakpoint-sm: 576px;
$breakpoint-md: 768px;
$breakpoint-lg: 992px;
$breakpoint-xl: 1200px;

// Z-index
// ===========================
$z-index-dropdown: 1000;
$z-index-sticky: 1020;
$z-index-fixed: 1030;
$z-index-modal-backdrop: 1040;
$z-index-modal: 1050;
$z-index-popover: 1060;
$z-index-tooltip: 1070;

// Grid
// ===========================
$container-max-width: 1200px;
$grid-gap: 20px;
$grid-gap-sm: 15px;
$grid-gap-lg: 30px;

```

Filename: src/styles/README.md

```
# Sass Style Organization

This project uses a well-organized Sass structure to maintain clean, scalable, and maintainable styles.

## File Structure

```
src/styles/
├── main.scss           # Main entry point that imports all other files
├── _variables.scss     # All variables (colors, spacing, typography, etc.)
├── _mixins.scss        # Reusable mixins and functions
├── _base.scss          # Base styles (reset, body, container, etc.)
├── _components.scss    # Component-specific styles (buttons, cards, forms, etc.)
├── _layout.scss        # Layout-specific styles (grids, responsive design, etc.)
└── README.md          # This documentation file
```

## Import Order

The files are imported in a specific order in `main.scss`:

1. **Variables** - Must be first so they can be used everywhere
2. **Mixins** - Second so they can use variables and be used by components
3. **Base** - Foundation styles
4. **Components** - Reusable component styles
5. **Layout** - Layout and responsive styles (can override component styles if needed)

## Variables (_variables.scss)

Contains all design tokens organized by category:

### Colors
- **Primary Colors**: `$primary-color`, `$secondary-color`
- **Background Colors**: `$background-color`, `$card-background`
- **Text Colors**: `$gray-1`, `$gray-3`, `$gray-4`
- **Border Colors**: `$border-color`, `$border-light`
- **Status Colors**: `$success-color`, `$danger-color`, `$warning-color`, `$info-color`
- **Hover States**: `$primary-hover`, `$secondary-hover`, `$danger-hover`

### Typography
- **Font Family**: `$font-family-base`
- **Font Sizes**: `$font-size-sm`, `$font-size-base`, `$font-size-lg`, etc.
- **Font Weights**: `$font-weight-normal`, `$font-weight-medium`, etc.
- **Line Heights**: `$line-height-base`, `$line-height-sm`, `$line-height-lg`

### Spacing
- **Spacing Scale**: `$spacing-xs` (4px) to `$spacing-xxxl` (30px)

### Border Radius
- **Radius Scale**: `$border-radius-sm` (4px) to `$border-radius-max` (50px)

### Shadows
- **Shadow Scale**: `$shadow-sm` to `$shadow-xl`

### Transitions
- **Duration**: `$transition-fast`, `$transition-base`, `$transition-slow`

### Breakpoints
- **Responsive**: `$breakpoint-xs` to `$breakpoint-xl`

## Mixins (_mixins.scss)

Contains reusable mixins organized by category:

### Media Queries
- `@mixin mobile` - For mobile-first responsive design
- `@mixin tablet` - For tablet breakpoints
- `@mixin desktop` - For desktop breakpoints
- `@mixin large-desktop` - For large desktop breakpoints

### Button Mixins
- `@mixin button-base` - Base button styles
- `@mixin button-variant($bg-color, $hover-color)` - Button color variants
- `@mixin button-size($padding-y, $padding-x, $font-size)` - Button size variants

### Card Mixins
- `@mixin card-base` - Base card styles
- `@mixin card-hover` - Card hover effects

### Form Mixins
- `@mixin form-control` - Base form control styles

### Layout Mixins
- `@mixin flex-center` - Center content with flexbox
- `@mixin flex-between` - Space between with flexbox
- `@mixin grid-auto-fit($min-width, $gap)` - Auto-fit grid
- `@mixin grid-auto-fill($min-width, $gap)` - Auto-fill grid

### Typography Mixins
- `@mixin text-truncate` - Truncate text with ellipsis
- `@mixin text-clamp($lines)` - Clamp text to specific number of lines

### Drag and Drop Mixins
- `@mixin draggable` - Make elements draggable
- `@mixin drop-target` - Style drop targets

## Usage Examples

### Using Variables
```scss
.my-component {
  background-color: $primary-color;
  padding: $spacing-lg;
  border-radius: $border-radius-md;
  box-shadow: $shadow-md;
}
```

### Using Mixins
```scss
.my-button {
  @include button-base;
  @include button-variant($success-color);
}

.my-grid {
  @include grid-auto-fill(250px, $spacing-lg);
}

@include tablet {
  .my-component {
    padding: $spacing-sm;
  }
}
```

### Creating New Components
When adding new components, follow this pattern:

```scss
// In _components.scss
.new-component {
  // Use variables for consistency
  background-color: $card-background;
  padding: $spacing-md;
  border-radius: $border-radius-sm;
  
  // Use mixins for common patterns
  @include flex-between;
  
  // Nested selectors for related elements
  &__title {
    font-size: $font-size-lg;
    color: $primary-color;
  }
  
  &--variant {
    background-color: $secondary-color;
  }
  
  // Responsive design
  @include tablet {
    padding: $spacing-sm;
  }
}
```

## Best Practices

1. **Always use variables** instead of hard-coded values
2. **Use mixins** for repeated patterns
3. **Follow the BEM methodology** for class naming
4. **Keep specificity low** - avoid deep nesting
5. **Use semantic variable names** that describe purpose, not appearance
6. **Group related styles** together
7. **Use modern Sass syntax** (`@use` instead of `@import`)
8. **Leverage Sass color functions** like `color.adjust()` for color variations

## Modern Sass Features

This project uses modern Sass features:

- **`@use` instead of `@import`** - Better module system
- **`color.adjust()` instead of `lighten()`/`darken()`** - Modern color functions
- **Explicit imports** - Each file imports what it needs
- **Namespace imports** - `@use "sass:color"` for built-in modules

```

---BEGIN_COMMENT---
Component-specific styles
---END_COMMENT---

Filename: src/styles/components/_alerts.scss

```scss
// ===========================
// ALERTS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.alert {
  margin-bottom: $spacing-lg;
  padding: 10px 20px;
  border-radius: $border-radius-lg;
  background-color: color.adjust($info-color, $lightness: 60%);
  border: 1px solid color.adjust($info-color, $lightness: 20%);
  color: $info-color;
  &--success {
    color: $success-color;
    background-color: color.adjust($success-color, $lightness: 60%);
    border-color: $success-color;
  }
}
```

Filename: src/styles/components/_badges.scss

```scss
// ===========================
// BADGES
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.badge {
  display: inline-block;
  padding: $spacing-xs $spacing-sm;
  border-radius: $border-radius-max;
  font-size: 0.75rem;
  font-weight: $font-weight-medium;
  background-color: $secondary-color;
  color: color.adjust($secondary-color, $lightness: -50%);
  &-success {
    background-color: $success-color;
  }
  &-warning {
    background-color: $warning-color;
    color: $gray-1;
  }
  &-danger {
    background-color: $danger-color;
  }
  &-count {
    font-size: 0.7rem;
  }
  &-neutral {
    background-color: $gray-5;
    color: $gray-2;
    padding: 2px 7px;
  }
}
```

Filename: src/styles/components/_buttons.scss

```scss
// ===========================
// BUTTONS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.btn {
  @include button-base;
  @include button-variant($primary-color, $primary-hover);
  &-secondary {
    color: $primary-color;
    background-color: rgba($primary-color, .15);
    &:hover:not(:disabled) {
      background-color: rgba($primary-color, .25) !important;
      color: color.adjust($primary-color, $lightness: -10%);
    }
  }
  &-tertiary {
    color: $primary-color;
    background-color: white;
    border: 1px solid rgba($primary-color, .4);
    &:hover:not(:disabled) {
      background-color: rgba($primary-color, .1) !important;
      color: color.adjust($primary-color, $lightness: -10%);
    }
  }
  &-danger {
    @include button-variant($danger-color, $danger-hover);
  }
  &-sm {
    @include button-size($spacing-xs, $spacing-md, $font-size-sm);
  }
}
```

Filename: src/styles/components/_cards.scss

```scss
// ===========================
// CARDS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.card {
  @include card-base;

  // Saving that for later when we do need a card hover mixin
  // &:hover {
  //   @include card-hover;
  // }

  .meal-image {
    height: 100px;
    background-color: $gray-5;
    img {
      display: block;
      height: 100%;
      width: 100%;
    }
  }
  .card-text {
    padding: 5px 10px 10px;
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    .card-title {
      font-size: $font-size-base;
      line-height: 1.3;
      margin-bottom: $spacing-md;
      color: $gray-1;
      font-weight: $font-weight-medium;
    }
  }
}
```

Filename: src/styles/components/_checkboxes.scss

```scss
// ===========================
// CHECKBOXES
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.checkbox-container {
  display: inline-flex;
  align-items: center;
  margin-bottom: 10px;
  input[type="checkbox"] {
    appearance: none;
    width: 22px;
    height: 22px;
    border: 1px solid $gray-3;
    border-radius: 50%;
    margin-right: $spacing-md;
    cursor: pointer;
    position: relative;
    transition: all $transition-base;
    flex-shrink: 0;
    &:checked {
      background-color: $primary-color;
      border-color: $primary-color;
      &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 9px;
        height: 4px;
        border: 2px solid white;
        border-top: none;
        border-right: none;
        transform: translate(-50%, -60%) rotate(-45deg);
      }
    }
    &:hover {
      border-color: $primary-color;
    }
    &:focus {
      outline: none;
      box-shadow: 0 0 0 2px rgba($primary-color, 0.2);
    }
  }
  label {
    cursor: pointer;
    transition: all $transition-base;
    font-size: $font-size-base;
    color: $gray-1;
    display: flex;
    align-items: start;
    gap: 8px;
  }
  &.checked label {
    text-decoration: line-through;
    opacity: 0.7;
    color: $gray-3;
  }
}

```

Filename: src/styles/components/_forms.scss

```scss
// ===========================
// FORMS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

// Form Labels
.form-label {
  display: block;
  margin-bottom: $spacing-xs;
  font-weight: $font-weight-medium;
  font-size: $font-size-sm;
  color: $gray-1;
}

// Form Controls
.form-control {
  @include form-control;
  width: 100%;
  &:is(select) {
    appearance: none;
    background-color: white;
    padding-right: 40px;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 8px center;
    background-repeat: no-repeat;
    background-size: 25px 25px;
    border-radius: $border-radius-max;
  }
  &:is(input) {
    border-radius: $border-radius-max;
  }
}

// Controls
.controls {
  @include flex-between;
  flex-wrap: wrap;
  gap: $spacing-sm;
}

// Form Groups
.form-group {
  margin-bottom: $spacing-md;
  &--inline {
    display: flex;
    align-items: center;
    gap: $spacing-sm;
    margin: 0;
  }
}

// Error Text
.error-text {
  color: $danger-color;
  font-size: $font-size-sm;
  margin-top: $spacing-xs;
}

// Controls and Filters
.controls-group {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: $spacing-sm;
  margin-bottom: $spacing-md;
  .form-control {
    width: auto;
  }
  .btn {
    white-space: nowrap;
  }
}

```

Filename: src/styles/components/_meal-components.scss

```scss
// ===========================
// MEAL COMPONENTS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

// Meal Ingredients
.meal-ingredients {
  font-size: $font-size-sm;
  p {
    margin: 0;
  }
}

// Quantity Controls
.quantity-controls {
  display: flex;
  align-items: center;
  gap: 3px;
  .quantity-display {
    min-width: 1.25rem;
    text-align: center;
    padding: $spacing-xs;
    line-height: 1;
  }
  .btn {
    padding: $spacing-xs;
    &:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    &.quantifier {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: $font-size-lg;
      height: 28px;
      width: 28px;
    }
  }
}

// Meal Item
.meal-item {
  @include meal-item-base;
  &__header {
    //display: flex;
    //margin-bottom: $spacing-sm;
  }
  &__title {
    margin: 0;
    font-weight: 500;
    font-size: $font-size-md;
  }
  &__actions {
    display: flex;
    align-items: center;
    gap: $spacing-xs;
  }
}

// Meal Actions
.meal-actions {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: $spacing-xs;
  .form-control {
    width: 60px;
  }
}

// Grocery List
.grocery-section {
  padding-top: $spacing-lg;
  &__title {
    font-size: $font-size-md;
    font-weight: 500;
    padding-bottom: $spacing-xs;
    margin-bottom: $spacing-sm;
    display: flex;
    align-items: center;
    gap: 15px;
    text-wrap: nowrap;
    &::after {
      content: "";
      height: 1px;
      width: 100%;
      background-color: $gray-5;
    }
  }
  &__list {
    list-style: none;
    padding: 0;
  }
}

// Grocery Notes - Component specific styles
.grocery-notes {
  margin-top: $spacing-xxxl;
  &__title {
    font-size: $font-size-base;
    margin-bottom: $spacing-xs;
  }
  &__counter {
    font-size: $font-size-sm;
    color: $gray-3;
    margin-top: $spacing-xs;
    text-align: right;
  }
  // Note: textarea layout styles are in layout/_app-layout.scss
}

// Note: Drag and Drop styles for meal-slot have been moved to layout/_schedule.scss

```

Filename: src/styles/components/_offline-status.scss

```scss
.offline-status {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 1000;
  background: var(--color-warning);
  color: var(--color-text-inverse);
  padding: 0.5rem 1rem;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  font-size: 0.875rem;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

  .offline-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .offline-icon {
    font-size: 1rem;
  }

  .offline-text {
    font-weight: 500;
  }

  .update-available {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--color-success);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
  }

  .update-icon {
    font-size: 1rem;
    animation: spin 2s linear infinite;
  }

  .update-text {
    font-weight: 500;
  }

  .update-button {
    background: var(--color-background);
    color: var(--color-success);
    border: none;
    padding: 0.25rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.75rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
      background: var(--color-background-hover);
      transform: translateY(-1px);
    }

    &:active {
      transform: translateY(0);
    }
  }

  .check-updates-button {
    background: transparent;
    color: var(--color-text-inverse);
    border: 1px solid var(--color-text-inverse);
    padding: 0.25rem 0.75rem;
    border-radius: 0.5rem;
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;

    &:hover {
      background: var(--color-text-inverse);
      color: var(--color-warning);
    }
  }

  // Different background colors based on status
  &.offline {
    background: var(--color-error);
  }

  &.update-available {
    background: var(--color-info);
  }

  // Animation for the update icon
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  // Responsive design
  @media (max-width: 768px) {
    flex-direction: column;
    gap: 0.5rem;
    padding: 0.75rem 1rem;

    .offline-indicator,
    .update-available {
      justify-content: center;
    }

    .check-updates-button {
      align-self: center;
    }
  }

  // Ensure content doesn't get hidden behind the status bar
  & + * {
    margin-top: 3rem;

    @media (max-width: 768px) {
      margin-top: 4rem;
    }
  }
}

// Add some default color variables if they don't exist
:root {
  --color-warning: #f59e0b;
  --color-success: #10b981;
  --color-error: #ef4444;
  --color-info: #3b82f6;
  --color-text-inverse: #ffffff;
  --color-background: #ffffff;
  --color-background-hover: #f3f4f6;
}

// Dark mode support
@media (prefers-color-scheme: dark) {
  :root {
    --color-background: #1f2937;
    --color-background-hover: #374151;
  }
}

```

Filename: src/styles/components/_tags.scss

```scss
// ===========================
// TAGS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.tag {
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  background-color: color.adjust($border-color, $lightness: 5%);
  color: $gray-3;
  padding: $spacing-xs $spacing-sm;
  border-radius: $border-radius-sm;
  margin-right: $spacing-xs;
  margin-bottom: $spacing-xs;
  font-size: $font-size-sm;

  .close {
    margin-left: $spacing-xs;
    font-size: $font-size-base;
    line-height: 0.5;
    cursor: pointer;
    transition: color $transition-fast;
    &:hover {
      color: $danger-color;
    }
  }
}
```

---BEGIN_COMMENT---
Layout-specific styles
---END_COMMENT---

Filename: src/styles/layout/_app-layout.scss

```scss
// ===========================
// APP LAYOUT UTILITIES
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.app-view {
  display: flex;
  flex-direction: column;
  gap: $spacing-xxxl;
}

.section-header {
  @include section-header;
  .section-title {
    font-weight: 500;
    font-size: $font-size-xxl;
  }
}
.empty {
  padding: 20px;
  text-align: center;
  border-radius: $border-radius-lg;
  background-color: $gray-6;
  color: $gray-3;
  border: 1px solid $gray-5;
}

// Grocery Notes - Layout specific styles
.grocery-notes {
  textarea {
    font-family: inherit;
    height: 200px;
    resize: vertical;
  }
}

```

Filename: src/styles/layout/_flex.scss

```scss
// ===========================
// FLEX UTILITIES
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.flex {
  display: flex;
}

.flex-between {
  @include flex-between;
}

.flex-center {
  @include flex-center;
}

// Ingredient List
.ingredient-list {
  padding-bottom: $spacing-sm;
  margin-bottom: $spacing-sm;
  border-bottom: 1px solid $border-color;
}
```

Filename: src/styles/layout/_forms-layout.scss

```scss
// ===========================
// FORMS LAYOUT
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

// Date Input Styling
.date-input {
  padding: $spacing-xs $spacing-sm;
  border-radius: $border-radius-max;
  border: 1px solid $border-color;
  font-size: $font-size-sm;

  &:focus {
    outline: none;
    border-color: $primary-color;
    box-shadow: 0 0 0 2px rgba($primary-color, 0.2);
  }
}
```

Filename: src/styles/layout/_grid.scss

```scss
// ===========================
// GRID SYSTEMS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

.grid {
  @include grid-auto-fill(300px, $grid-gap);
}

.meal-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: $spacing-sm;
}

.meal-list {
  display: flex;
  padding: 5px 0;
  gap: $spacing-sm;
  margin-top: $spacing-sm;
  overflow-y: auto;
  .meal-item {
    flex: 1 0 180px;
  }
}

.meal-slots-container {
  @include grid-auto-fill(200px, $spacing-lg);
  margin: $spacing-xl 0;
}
```

Filename: src/styles/layout/_responsive.scss

```scss
// ===========================
// RESPONSIVE DESIGN
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

@include tablet {
  .grid {
    grid-template-columns: 1fr;
  }
  .meal-slots-container {
    grid-template-columns: 1fr;
  }
  .meal-list {
    grid-template-columns: repeat(2, 1fr);
  }
  .meal-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  .container {
    padding: $spacing-lg $spacing-sm $spacing-xxl;
  }
}

@include mobile {
  .meal-slots-container {
    grid-template-columns: 1fr;
  }
  .meal-list {
    grid-template-columns: 1fr;
  }
  .meal-grid {
    grid-template-columns: 1fr 1fr;
  }
  .container {
    padding: $spacing-lg $spacing-sm $spacing-xxl;
  }
}
```

Filename: src/styles/layout/_schedule.scss

```scss
// ===========================
// SCHEDULE
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

// Schedule Controls
.schedule-controls {
  display: flex;
  align-items: center;
  gap: $spacing-sm;
  margin-bottom: $spacing-xl;
  @include mobile {
    flex-direction: column;
    align-items: baseline;
  }
  &__date-group {
    display: flex;
    align-items: center;
    gap: $spacing-sm;
    label {
      font-size: $font-size-sm;
      font-weight: $font-weight-semibold;
    }
  }
}

// Meal Slot Styles
.meal-slot {
  @include draggable;
  @include drop-target;
  position: relative;
  border: 1px solid $border-color;
  border-radius: $border-radius-md;
  padding: $spacing-md $spacing-lg;
  min-height: 100px;
  background-color: $card-background;
  box-shadow: $shadow-md;
  touch-action: none; /* Prevent all scrolling during drag operations */
  .drag-locked & {
    touch-action: auto; /* Allow scrolling when the schedule is locked */
  }
  &--empty {
    border: 2px dashed $border-color;
    background-color: rgba(0, 0, 0, 0.02);
    box-shadow: none;
    cursor: default;
    .empty-slot-content {
      @include flex-center;
      height: 100%;
      color: $border-color;
    }
  }
  &.cooked {
    opacity: 0.7;
    background-color: rgba($success-color, 0.05) !important;
  }
  &__date-label {
    position: absolute;
    top: $spacing-xs;
    right: $spacing-xs;
    font-size: 0.75rem;
    font-weight: $font-weight-semibold;
    color: $gray-1;
    background-color: rgba(255, 255, 255, 0.8);
    padding: 2px 6px;
    border-radius: $border-radius-sm;
    border: 1px solid $border-color;
  }
  &__title {
    margin: 0;
    font-size: $font-size-md;
  }
}

// Meal Cooked Toggle
.meal-cooked-toggle {
  @include meal-cooked-toggle;
}

```

Filename: src/styles/layout/_tabs.scss

```scss
// ===========================
// TABS
// ===========================

@use "sass:color";
@use "../variables" as *;
@use "../mixins" as *;

// Tabler icons for future ref:
// Planner: list
// Schedule: calendar
// Groceries: shopping-bag

.tabs {
  position: sticky;
  bottom: $spacing-xxl;
  z-index: 1;
  min-height: 36px;
  max-width: 100%;
  display: inline-flex;
  overflow: auto;
  margin-top: 20px;
  border-radius: $border-radius-max;
  background-color: $gray-6;
  border: 1px solid $gray-5;
  box-shadow: $shadow-md;
  button.tab {
    display: flex;
    align-items: center;
    justify-content: center;
    flex: 1;
    gap: 5px;
    border: none;
    padding: 10px 20px;
    font-size: $font-size-sm;
    color: $gray-1;
    transition: $transition-base;
    border-radius: $border-radius-max;
    cursor: pointer;
    background-color: transparent;
    &.tab-active {
      background-color: $primary-color;
      color: #fff;
    }
    &:not(.tab-active) {
      &:hover {
        background-color: $gray-5;
      }
    }
  }
}
```

---BEGIN_COMMENT---
Static assets - meal images
---END_COMMENT---

---BEGIN_COMMENT---
Public directory with static files and PWA assets
---END_COMMENT---

Filename: public/favicon.svg

```
<svg width="160" height="160" viewBox="0 0 160 160" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="160" height="160" rx="80" fill="url(#paint0_linear_756_2)"/>
<g filter="url(#filter0_dd_756_2)">
<path d="M81.5373 27.2115C86.7297 25.6662 89.8954 25 89.8954 25C89.8954 25 82.9075 30 80.1124 32.5C77.3173 35 75.9734 39.9926 94.4857 45.2404C112.998 50.4882 96.0248 67.9167 78.0512 70C82.7957 67.3958 87.5666 61.2111 77.0543 57.0879C33.5301 40.0167 75.3616 29.0495 81.5373 27.2115Z" fill="white"/>
</g>
<g filter="url(#filter1_dd_756_2)">
<path d="M125.003 85.0001C127.764 85.0001 130.026 87.2451 129.754 89.9931C127.248 115.263 105.929 135 80 135C54.0709 135 32.7516 115.263 30.2462 89.9931C29.9737 87.2451 32.2356 85.0001 34.997 85.0001C43.0994 85 60.2065 85 80 85C99.7935 85 116.901 85 125.003 85.0001Z" fill="#FFDDAB"/>
</g>
<defs>
<filter id="filter0_dd_756_2" x="42.5" y="20" width="75" height="75" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="10"/>
<feGaussianBlur stdDeviation="7.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.67 0 0 0 0 0.16951 0 0 0 0 0.1139 0 0 0 0.3 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_756_2"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="5"/>
<feGaussianBlur stdDeviation="5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.67 0 0 0 0 0.16951 0 0 0 0 0.1139 0 0 0 0.3 0"/>
<feBlend mode="normal" in2="effect1_dropShadow_756_2" result="effect2_dropShadow_756_2"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect2_dropShadow_756_2" result="shape"/>
</filter>
<filter id="filter1_dd_756_2" x="15.2239" y="80" width="129.552" height="80.0001" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="10"/>
<feGaussianBlur stdDeviation="7.5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.67 0 0 0 0 0.16951 0 0 0 0 0.1139 0 0 0 0.3 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_756_2"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="5"/>
<feGaussianBlur stdDeviation="5"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0.67 0 0 0 0 0.16951 0 0 0 0 0.1139 0 0 0 0.3 0"/>
<feBlend mode="normal" in2="effect1_dropShadow_756_2" result="effect2_dropShadow_756_2"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect2_dropShadow_756_2" result="shape"/>
</filter>
<linearGradient id="paint0_linear_756_2" x1="80" y1="0" x2="80" y2="160" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF856A"/>
<stop offset="1" stop-color="#DE6052"/>
</linearGradient>
</defs>
</svg>

```

Filename: public/foodinator-logo.svg

```
<svg width="100" height="110" viewBox="0 0 100 110" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M51.5373 2.21154C56.7297 0.666206 59.8954 0 59.8954 0C59.8954 0 52.9075 5 50.1124 7.5C47.3173 10 45.9734 14.9926 64.4857 20.2404C82.9981 25.4882 66.0248 42.9167 48.0512 45C52.7957 42.3958 57.5666 36.2111 47.0543 32.0879C3.53006 15.0167 45.3616 4.04952 51.5373 2.21154Z" fill="white"/>
<path d="M95.003 60.0001C97.7644 60.0001 100.026 62.2451 99.7538 64.9931C97.2485 90.263 75.9291 110 50 110C24.0709 110 2.75155 90.263 0.246181 64.9931C-0.0262625 62.2451 2.23557 60.0001 4.99698 60.0001C13.0994 60 30.2065 60 50 60C69.7935 60 86.9006 60 95.003 60.0001Z" fill="#FFDDAB"/>
</svg>

```

Filename: public/manifest.json

```json
{
  "short_name": "Foodinator",
  "name": "Foodinator - Weekly Meal & Grocery Planner",
  "description": "Plan your weekly meals and automatically generate grocery lists. Works offline!",
  "icons": [
    {
      "src": "favicon.svg",
      "sizes": "any",
      "type": "image/svg+xml",
      "purpose": "any maskable"
    },
    {
      "src": "apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    },
    {
      "src": "android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "orientation": "portrait-primary",
  "theme_color": "#4a6fa5",
  "background_color": "#ffffff",
  "categories": ["food", "lifestyle", "productivity"],
  "lang": "en",
  "dir": "ltr",
  "scope": "/",
  "prefer_related_applications": false,
  "shortcuts": [
    {
      "name": "Plan Meals",
      "short_name": "Plan",
      "description": "Plan your weekly meals",
      "url": "/?tab=planner",
      "icons": [
        {
          "src": "android-chrome-192x192.png",
          "sizes": "192x192"
        }
      ]
    },
    {
      "name": "Grocery List",
      "short_name": "Grocery",
      "description": "View your grocery list",
      "url": "/?tab=grocery",
      "icons": [
        {
          "src": "android-chrome-192x192.png",
          "sizes": "192x192"
        }
      ]
    },
    {
      "name": "Schedule",
      "short_name": "Schedule",
      "description": "View your meal schedule",
      "url": "/?tab=schedule",
      "icons": [
        {
          "src": "android-chrome-192x192.png",
          "sizes": "192x192"
        }
      ]
    }
  ]
}

```

Filename: public/site.webmanifest

```
{
  "short_name": "Foodinator",
  "name": "Foodinator - Weekly Meal & Grocery Planner",
  "icons": [
    {
      "src": "favicon.svg",
      "sizes": "any",
      "type": "image/svg+xml",
      "purpose": "any maskable"
    },
    {
      "src": "apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#4a6fa5",
  "background_color": "#ffffff"
}

```

Filename: public/sw.js

```javascript
const CACHE_NAME = "foodinator-v1";
const STATIC_CACHE_NAME = "foodinator-static-v1";
const DATA_CACHE_NAME = "foodinator-data-v1";

// Static assets to cache
const STATIC_ASSETS = [
  "/",
  "/index.html",
  "/manifest.json",
  "/favicon.svg",
  "/apple-touch-icon.png",
  "/android-chrome-192x192.png",
  "/android-chrome-512x512.png",
  "/foodinator-logo.svg",
  "/img-meals/avocado-toasts.jpg",
  "/img-meals/burgers.jpg",
  "/img-meals/chic-broc.jpg",
  "/img-meals/chickpea-chard-pork.jpg",
  "/img-meals/epic-beans-steak.jpg",
  "/img-meals/fisn-n-mash.jpg",
  "/img-meals/pasta-bolognese.jpg",
  "/img-meals/pasta-carbonara.jpg"
];

// Install event - cache static assets
self.addEventListener("install", (event) => {
  console.log("Service Worker: Installing...");
  event.waitUntil(
    caches.open(STATIC_CACHE_NAME)
      .then((cache) => {
        console.log("Service Worker: Caching static assets");
        return cache.addAll(STATIC_ASSETS);
      })
      .then(() => {
        console.log("Service Worker: Static assets cached successfully");
        return self.skipWaiting();
      })
      .catch((error) => {
        console.error("Service Worker: Failed to cache static assets", error);
      })
  );
});

// Activate event - clean up old caches
self.addEventListener("activate", (event) => {
  console.log("Service Worker: Activating...");
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE_NAME && cacheName !== DATA_CACHE_NAME) {
              console.log("Service Worker: Deleting old cache", cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        console.log("Service Worker: Activated successfully");
        return self.clients.claim();
      })
  );
});

// Fetch event - implement caching strategies
self.addEventListener("fetch", (event) => {
  const { request } = event;
  const url = new URL(request.url);

  // Handle navigation requests (HTML pages)
  if (request.mode === "navigate") {
    event.respondWith(
      fetch(request)
        .then((response) => {
          // If online, cache the response and return it
          const responseClone = response.clone();
          caches.open(STATIC_CACHE_NAME)
            .then((cache) => cache.put(request, responseClone));
          return response;
        })
        .catch(() => {
          // If offline, serve from cache
          return caches.match("/index.html");
        })
    );
    return;
  }

  // Handle static assets (images, CSS, JS)
  if (STATIC_ASSETS.some(asset => request.url.includes(asset)) || 
      request.url.includes(".js") || 
      request.url.includes(".css") || 
      request.url.includes(".jpg") || 
      request.url.includes(".png") || 
      request.url.includes(".svg")) {
    
    event.respondWith(
      caches.match(request)
        .then((cachedResponse) => {
          if (cachedResponse) {
            // Serve from cache, but also try to update in background
            fetch(request)
              .then((response) => {
                if (response.ok) {
                  const responseClone = response.clone();
                  caches.open(STATIC_CACHE_NAME)
                    .then((cache) => cache.put(request, responseClone));
                }
              })
              .catch(() => {
                // Network failed, but we have cache
              });
            return cachedResponse;
          }
          
          // Not in cache, try network
          return fetch(request)
            .then((response) => {
              if (response.ok) {
                const responseClone = response.clone();
                caches.open(STATIC_CACHE_NAME)
                  .then((cache) => cache.put(request, responseClone));
              }
              return response;
            });
        })
    );
    return;
  }

  // Handle API requests or other dynamic content
  if (request.url.includes("/api/") || request.method === "POST") {
    event.respondWith(
      fetch(request)
        .then((response) => {
          // Cache successful GET requests
          if (request.method === "GET" && response.ok) {
            const responseClone = response.clone();
            caches.open(DATA_CACHE_NAME)
              .then((cache) => cache.put(request, responseClone));
          }
          return response;
        })
        .catch(() => {
          // If offline and it's a GET request, try to serve from cache
          if (request.method === "GET") {
            return caches.match(request);
          }
          // For POST requests when offline, we'll handle this with background sync
          return new Response(JSON.stringify({ 
            error: "Offline", 
            message: "Request will be retried when online" 
          }), {
            status: 503,
            headers: { "Content-Type": "application/json" }
          });
        })
    );
    return;
  }

  // Default: try network first, fallback to cache
  event.respondWith(
    fetch(request)
      .catch(() => caches.match(request))
  );
});

// Background sync for offline actions
self.addEventListener("sync", (event) => {
  console.log("Service Worker: Background sync triggered", event.tag);
  
  if (event.tag === "background-sync-grocery-list") {
    event.waitUntil(syncGroceryList());
  }
  
  if (event.tag === "background-sync-meal-plan") {
    event.waitUntil(syncMealPlan());
  }
});

// Sync functions
async function syncGroceryList() {
  try {
    // Get pending grocery list updates from IndexedDB
    const pendingUpdates = await getPendingGroceryUpdates();
    
    for (const update of pendingUpdates) {
      try {
        // Try to sync with server (if you have an API)
        // await fetch('/api/grocery-list', {
        //   method: 'POST',
        //   body: JSON.stringify(update.data)
        // });
        
        // Remove from pending updates
        await removePendingUpdate("grocery", update.id);
        
        // Notify the app about successful sync
        self.clients.matchAll().then(clients => {
          clients.forEach(client => {
            client.postMessage({
              type: "SYNC_SUCCESS",
              data: { type: "grocery", id: update.id }
            });
          });
        });
      } catch (error) {
        console.error("Failed to sync grocery list update:", error);
      }
    }
  } catch (error) {
    console.error("Background sync failed:", error);
  }
}

async function syncMealPlan() {
  try {
    // Get pending meal plan updates from IndexedDB
    const pendingUpdates = await getPendingMealPlanUpdates();
    
    for (const update of pendingUpdates) {
      try {
        // Try to sync with server (if you have an API)
        // await fetch('/api/meal-plan', {
        //   method: 'POST',
        //   body: JSON.stringify(update.data)
        // });
        
        // Remove from pending updates
        await removePendingUpdate("mealPlan", update.id);
        
        // Notify the app about successful sync
        self.clients.matchAll().then(clients => {
          clients.forEach(client => {
            client.postMessage({
              type: "SYNC_SUCCESS",
              data: { type: "mealPlan", id: update.id }
            });
          });
        });
      } catch (error) {
        console.error("Failed to sync meal plan update:", error);
      }
    }
  } catch (error) {
    console.error("Background sync failed:", error);
  }
}

// IndexedDB helper functions (simplified - you might want to use a library like Dexie)
async function getPendingGroceryUpdates() {
  // This would get pending updates from IndexedDB
  // For now, return empty array since we're using localStorage
  return [];
}

async function getPendingMealPlanUpdates() {
  // This would get pending updates from IndexedDB
  // For now, return empty array since we're using localStorage
  return [];
}

async function removePendingUpdate(type, id) {
  // This would remove the update from IndexedDB
  console.log(`Removing pending ${type} update:`, id);
}

// Handle messages from the main app
self.addEventListener("message", (event) => {
  console.log("Service Worker: Received message", event.data);
  
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === "CACHE_UPDATE") {
    // Handle cache update requests from the app
    const { url, data } = event.data;
    caches.open(DATA_CACHE_NAME)
      .then((cache) => {
        const response = new Response(JSON.stringify(data), {
          headers: { "Content-Type": "application/json" }
        });
        return cache.put(url, response);
      });
  }
});

// Periodic background sync (if supported)
self.addEventListener("periodicsync", (event) => {
  console.log("Service Worker: Periodic sync triggered", event.tag);
  
  if (event.tag === "update-app-data") {
    event.waitUntil(updateAppData());
  }
});

async function updateAppData() {
  try {
    // Check for updates to meals and ingredients data
    // This could fetch from your GitHub Pages deployment
    const response = await fetch("/api/app-data");
    if (response.ok) {
      const data = await response.json();
      
      // Update cache with new data
      const cache = await caches.open(DATA_CACHE_NAME);
      await cache.put("/api/app-data", response.clone());
      
      // Notify the app about data updates
      self.clients.matchAll().then(clients => {
        clients.forEach(client => {
          client.postMessage({
            type: "DATA_UPDATE",
            data: data
          });
        });
      });
    }
  } catch (error) {
    console.error("Failed to update app data:", error);
  }
}

```

Filename: public/robots.txt

```
# Allow all crawlers
User-agent: *
Allow: /

# Sitemap location (if you have one)
# Sitemap: https://yourusername.github.io/foodinator/sitemap.xml

```

Filename: public/404.html

```html
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <title>Foodinator</title>
  <script type="text/javascript">
    // Single Page Apps for GitHub Pages
    // MIT License
    // https://github.com/rafgraph/spa-github-pages
    // This script takes the current url and converts the path and query
    // string into just a query string, and then redirects the browser
    // to the new url with only a query string and hash fragment,
    // e.g. https://www.foo.tld/one/two?a=b&c=d#qwe, becomes
    // https://www.foo.tld/?/one/two&a=b~and~c=d#qwe
    // Note: this 404.html file must be at least 512 bytes for it to work
    // with Internet Explorer (it is currently > 512 bytes)

    // If you're creating a Project Pages site and NOT using a custom domain,
    // then set pathSegmentsToKeep to 1 (enterprise users may need to set it to > 1).
    // This way the code will only replace the route part of the path, and not
    // the real directory in which the app resides, for example:
    // https://username.github.io/repo-name/one/two?a=b&c=d#qwe becomes
    // https://username.github.io/repo-name/?/one/two&a=b~and~c=d#qwe
    // Otherwise, leave pathSegmentsToKeep as 0.
    var pathSegmentsToKeep = 1;

    var l = window.location;
    l.replace(
      l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
      l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?/' +
      l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
      (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
      l.hash
    );

  </script>
</head>
<body>
</body>
</html>

```

Filename: public/CNAME

```
# Add your custom domain here if you have one
# Example: foodinator.yourdomain.com

```

Filename: public/FAVICON_README.md

```
# Favicon Implementation Guide

## Current Status
The project currently has the following favicon-related files:
- `foodinator-logo.svg`: Main SVG favicon used for browsers that support SVG favicons
- `favicon.svg`: A copy of the main logo with theme-colored elements
- `apple-touch-icon.png`: 180x180 PNG icon for iOS devices
- `manifest.json`: Web app manifest with icon definitions

## Improvements Made
1. Removed redundant `site.webmanifest` reference from `index.html`
2. Updated `favicon.svg` with proper content
3. Updated `manifest.json` with proper theme color and icon definitions
4. Ensured consistent theme color (#4a6fa5) across the application

## Recommended Further Improvements
For optimal cross-browser and cross-device compatibility, consider adding the following favicon formats:

1. **Android Chrome Icons**:
   - Create `android-chrome-192x192.png` (192x192 pixels)
   - Create `android-chrome-512x512.png` (512x512 pixels)
   - Update `manifest.json` to include these icons

2. **Additional Favicon Formats**:
   - `favicon.ico`: For older browsers that don't support SVG favicons
   - `favicon-16x16.png`: 16x16 PNG icon
   - `favicon-32x32.png`: 32x32 PNG icon

3. **Additional HTML Tags**:
   ```html
   <link rel="icon" type="image/png" sizes="32x32" href="/foodinator/favicon-32x32.png">
   <link rel="icon" type="image/png" sizes="16x16" href="/foodinator/favicon-16x16.png">
   <link rel="mask-icon" href="/foodinator/safari-pinned-tab.svg" color="#4a6fa5">
   <meta name="msapplication-TileColor" content="#4a6fa5">
   ```

## Tools for Generating Favicons
You can use the following tools to generate all the necessary favicon formats from your SVG logo:
- [RealFaviconGenerator](https://realfavicongenerator.net/)
- [Favicon.io](https://favicon.io/)
- [Favicon Generator](https://www.favicon-generator.org/)

These tools will generate all the necessary files and provide the HTML code to include in your `index.html` file.
```

---BEGIN_COMMENT---
Public meal images (duplicated from src/assets for direct access)
---END_COMMENT---

---BEGIN_COMMENT---
Configuration files
---END_COMMENT---

Filename: package.json

```json
{
  "name": "foodinator",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "homepage": "https://yourusername.github.io/foodinator/",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.22.0",
    "@types/node": "^20.10.5",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "sass": "^1.89.2",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.26.1",
    "vite": "^6.3.1"
  }
}

```

Filename: package-lock.json

```json
{
  "name": "foodinator",
  "version": "0.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "foodinator",
      "version": "0.0.0",
      "dependencies": {
        "react": "^19.0.0",
        "react-dom": "^19.0.0"
      },
      "devDependencies": {
        "@eslint/js": "^9.22.0",
        "@types/node": "^20.10.5",
        "@types/react": "^19.0.10",
        "@types/react-dom": "^19.0.4",
        "@vitejs/plugin-react": "^4.3.4",
        "eslint": "^9.22.0",
        "eslint-plugin-react-hooks": "^5.2.0",
        "eslint-plugin-react-refresh": "^0.4.19",
        "globals": "^16.0.0",
        "sass": "^1.89.2",
        "typescript": "~5.7.2",
        "typescript-eslint": "^8.26.1",
        "vite": "^6.3.1"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.26.2",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.26.2.tgz",
      "integrity": "sha512-RJlIHRueQgwWitWgF8OdFYGZX328Ax5BCemNGlqHfplnRT9ESi8JkFlvaVYbS+UubVY6dpv87Fs2u5M29iNFVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.25.9",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.26.8",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.26.8.tgz",
      "integrity": "sha512-oH5UPLMWR3L2wEFLnFJ1TZXqHufiTKAiLfqw5zkhS4dKXLJ10yVztfil/twG8EDTA4F/tvVNw9nOl4ZMslB8rQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.26.10",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.26.10.tgz",
      "integrity": "sha512-vMqyb7XCDMPvJFFOaT9kxtiRh42GwlZEg1/uIgtZshS5a/8OaduUfCi7kynKgc3Tw/6Uo2D+db9qBttghhmxwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.26.10",
        "@babel/helper-compilation-targets": "^7.26.5",
        "@babel/helper-module-transforms": "^7.26.0",
        "@babel/helpers": "^7.26.10",
        "@babel/parser": "^7.26.10",
        "@babel/template": "^7.26.9",
        "@babel/traverse": "^7.26.10",
        "@babel/types": "^7.26.10",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.0.tgz",
      "integrity": "sha512-VybsKvpiN1gU1sdMZIp7FcqphVVKEwcuj02x73uvcHE0PTihx1nlBcowYWhDwjpoAXRv43+gDzyggGnn1XZhVw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.0",
        "@babel/types": "^7.27.0",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.0.tgz",
      "integrity": "sha512-LVk7fbXml0H2xH34dFzKQ7TDZ2G4/rVTOrq9V+icbbadjbVxxeFeDsNHv2SrZeWoA+6ZiTyWYWtScEIW07EAcA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.26.8",
        "@babel/helper-validator-option": "^7.25.9",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.25.9.tgz",
      "integrity": "sha512-tnUA4RsrmflIM6W6RFTLFSXITtl0wKjgpnLgXyowocVPrbYrLUXSBXDgTs8BlbmIzIdlBySRQjINYs2BAkiLtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.25.9",
        "@babel/types": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.26.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.26.0.tgz",
      "integrity": "sha512-xO+xu6B5K2czEnQye6BHA7DolFFmS3LB7stHZFaOLb1pAwO1HWLS8fXA+eh0A2yIvltPVmx3eNNDBJA2SLHXFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9",
        "@babel/traverse": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.26.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.26.5.tgz",
      "integrity": "sha512-RS+jZcRdZdRFzMyr+wcsaqOmld1/EqTghfaBGQQd/WnRdzdlvSZ//kF7U8VQTxf1ynZ4cjUcYgjVGx13ewNPMg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.25.9.tgz",
      "integrity": "sha512-4A/SCr/2KLd5jrtOMFzaKjVtAei3+2r/NChoBNoZ3EyP/+GlhoaEGoWOZUmFmoITP7zOJyHIMm+DYRd8o3PvHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.25.9.tgz",
      "integrity": "sha512-Ed61U6XJc3CVRfkERJWDz4dJwKe7iLmmJsbOGu9wSloNSFttHV0I8g6UAgb7qnK5ly5bGLPd4oXZlxCdANBOWQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.25.9.tgz",
      "integrity": "sha512-e/zv1co8pp55dNdEcCynfj9X7nyUKUXoUEwfXqaZt0omVOmDe9oOTdKStH4GmAw6zxMFs50ZayuMfHDKlO7Tfw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.0.tgz",
      "integrity": "sha512-U5eyP/CTFPuNE3qk+WZMxFkp/4zUzdceQlfzf7DdGdhp+Fezd7HD+i8Y24ZuTMKX3wQBld449jijbGq6OdGNQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.0",
        "@babel/types": "^7.27.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.0.tgz",
      "integrity": "sha512-iaepho73/2Pz7w2eMS0Q5f83+0RKI7i4xmiYeBmDzfRVbQtTOG7Ts0S4HzJVsTMGI9keU8rNfuZr8DKfSt7Yyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.25.9.tgz",
      "integrity": "sha512-y8quW6p0WHkEhmErnfe58r7x0A70uKphQm8Sp8cV7tjNQwK56sNVK0M73LK3WuYmsuyrftut4xAkjjgU0twaMg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.25.9",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.25.9.tgz",
      "integrity": "sha512-+iqjT8xmXhhYv4/uiYd8FNQsraMFZIfxVSqxxVSZP0WbbSAWvBXAul0m/zu+7Vv4O/3WtApy9pmaTMiumEZgfg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.0.tgz",
      "integrity": "sha512-2ncevenBqXI6qRMukPlXwHKHchC7RyMuu4xv5JBXRfOGVcTy1mXCD12qrp7Jsoxll1EV3+9sE4GugBVRjT2jFA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/parser": "^7.27.0",
        "@babel/types": "^7.27.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.0.tgz",
      "integrity": "sha512-19lYZFzYVQkkHkl4Cy4WrAVcqBkgvV2YM2TU3xG6DIwO7O3ecbDPfW3yM3bjAGcqcQHi+CCtjMR3dIEHxsd6bA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.26.2",
        "@babel/generator": "^7.27.0",
        "@babel/parser": "^7.27.0",
        "@babel/template": "^7.27.0",
        "@babel/types": "^7.27.0",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.0.tgz",
      "integrity": "sha512-H45s8fVLYjbhFH62dIJ3WtmJ6RSPt/3DRO0ZcT2SUiYiQyz3BLVb9ADEnLl91m74aQPS3AzzeajZHYOalWe3bg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.25.9",
        "@babel/helper-validator-identifier": "^7.25.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.2.tgz",
      "integrity": "sha512-wCIboOL2yXZym2cgm6mlA742s9QeJ8DjGVaL39dLN4rRwrOgOyYSnOaFPhKZGLb2ngj4EyfAFjsNJwPXZvseag==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.2.tgz",
      "integrity": "sha512-NQhH7jFstVY5x8CKbcfa166GoV0EFkaPkCKBQkdPJFvo5u+nGXLEH/ooniLb3QI8Fk58YAx7nsPLozUWfCBOJA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.2.tgz",
      "integrity": "sha512-5ZAX5xOmTligeBaeNEPnPaeEuah53Id2tX4c2CVP3JaROTH+j4fnfHCkr1PjXMd78hMst+TlkfKcW/DlTq0i4w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.2.tgz",
      "integrity": "sha512-Ffcx+nnma8Sge4jzddPHCZVRvIfQ0kMsUsCMcJRHkGJ1cDmhe4SsrYIjLUKn1xpHZybmOqCWwB0zQvsjdEHtkg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.2.tgz",
      "integrity": "sha512-MpM6LUVTXAzOvN4KbjzU/q5smzryuoNjlriAIx+06RpecwCkL9JpenNzpKd2YMzLJFOdPqBpuub6eVRP5IgiSA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.2.tgz",
      "integrity": "sha512-5eRPrTX7wFyuWe8FqEFPG2cU0+butQQVNcT4sVipqjLYQjjh8a8+vUTfgBKM88ObB85ahsnTwF7PSIt6PG+QkA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.2.tgz",
      "integrity": "sha512-mLwm4vXKiQ2UTSX4+ImyiPdiHjiZhIaE9QvC7sw0tZ6HoNMjYAqQpGyui5VRIi5sGd+uWq940gdCbY3VLvsO1w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.2.tgz",
      "integrity": "sha512-6qyyn6TjayJSwGpm8J9QYYGQcRgc90nmfdUb0O7pp1s4lTY+9D0H9O02v5JqGApUyiHOtkz6+1hZNvNtEhbwRQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.2.tgz",
      "integrity": "sha512-UHBRgJcmjJv5oeQF8EpTRZs/1knq6loLxTsjc3nxO9eXAPDLcWW55flrMVc97qFPbmZP31ta1AZVUKQzKTzb0g==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.2.tgz",
      "integrity": "sha512-gq/sjLsOyMT19I8obBISvhoYiZIAaGF8JpeXu1u8yPv8BE5HlWYobmlsfijFIZ9hIVGYkbdFhEqC0NvM4kNO0g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.2.tgz",
      "integrity": "sha512-bBYCv9obgW2cBP+2ZWfjYTU+f5cxRoGGQ5SeDbYdFCAZpYWrfjjfYwvUpP8MlKbP0nwZ5gyOU/0aUzZ5HWPuvQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.2.tgz",
      "integrity": "sha512-SHNGiKtvnU2dBlM5D8CXRFdd+6etgZ9dXfaPCeJtz+37PIUlixvlIhI23L5khKXs3DIzAn9V8v+qb1TRKrgT5w==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.2.tgz",
      "integrity": "sha512-hDDRlzE6rPeoj+5fsADqdUZl1OzqDYow4TB4Y/3PlKBD0ph1e6uPHzIQcv2Z65u2K0kpeByIyAjCmjn1hJgG0Q==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.2.tgz",
      "integrity": "sha512-tsHu2RRSWzipmUi9UBDEzc0nLc4HtpZEI5Ba+Omms5456x5WaNuiG3u7xh5AO6sipnJ9r4cRWQB2tUjPyIkc6g==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.2.tgz",
      "integrity": "sha512-k4LtpgV7NJQOml/10uPU0s4SAXGnowi5qBSjaLWMojNCUICNu7TshqHLAEbkBdAszL5TabfvQ48kK84hyFzjnw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.2.tgz",
      "integrity": "sha512-GRa4IshOdvKY7M/rDpRR3gkiTNp34M0eLTaC1a08gNrh4u488aPhuZOCpkF6+2wl3zAN7L7XIpOFBhnaE3/Q8Q==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.2.tgz",
      "integrity": "sha512-QInHERlqpTTZ4FRB0fROQWXcYRD64lAoiegezDunLpalZMjcUcld3YzZmVJ2H/Cp0wJRZ8Xtjtj0cEHhYc/uUg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.2.tgz",
      "integrity": "sha512-talAIBoY5M8vHc6EeI2WW9d/CkiO9MQJ0IOWX8hrLhxGbro/vBXJvaQXefW2cP0z0nQVTdQ/eNyGFV1GSKrxfw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.2.tgz",
      "integrity": "sha512-voZT9Z+tpOxrvfKFyfDYPc4DO4rk06qamv1a/fkuzHpiVBMOhpjK+vBmWM8J1eiB3OLSMFYNaOaBNLXGChf5tg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.2.tgz",
      "integrity": "sha512-dcXYOC6NXOqcykeDlwId9kB6OkPUxOEqU+rkrYVqJbK2hagWOMrsTGsMr8+rW02M+d5Op5NNlgMmjzecaRf7Tg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.2.tgz",
      "integrity": "sha512-t/TkWwahkH0Tsgoq1Ju7QfgGhArkGLkF1uYz8nQS/PPFlXbP5YgRpqQR3ARRiC2iXoLTWFxc6DJMSK10dVXluw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.2.tgz",
      "integrity": "sha512-cfZH1co2+imVdWCjd+D1gf9NjkchVhhdpgb1q5y6Hcv9TP6Zi9ZG/beI3ig8TvwT9lH9dlxLq5MQBBgwuj4xvA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.2.tgz",
      "integrity": "sha512-7Loyjh+D/Nx/sOTzV8vfbB3GJuHdOQyrOryFdZvPHLf42Tk9ivBU5Aedi7iyX+x6rbn2Mh68T4qq1SDqJBQO5Q==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.2.tgz",
      "integrity": "sha512-WRJgsz9un0nqZJ4MfhabxaD9Ft8KioqU3JMinOTvobbX6MOSUigSBlogP8QB3uxpJDsFS6yN+3FDBdqE5lg9kg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.2.tgz",
      "integrity": "sha512-kM3HKb16VIXZyIeVrM1ygYmZBKybX8N4p754bw390wGO3Tf2j4L2/WYL+4suWujpgf6GBYs3jv7TyUivdd05JA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.6.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.6.1.tgz",
      "integrity": "sha512-KTsJMmobmbrFLe3LDh0PC2FXpcSYJt/MLjlkh/9LEnmKYLSYmT/0EW9JWANjeoemiuZrmogti0tW5Ch+qNUYDw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.20.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.20.0.tgz",
      "integrity": "sha512-fxlS1kkIjx8+vy2SjuCB94q3htSNrufYTXubwiBFeaQHbH6Ipi43gFJq2zCMt6PHhImH3Xmr0NksKDvchWlpQQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.2.1.tgz",
      "integrity": "sha512-RI17tsD2frtDu/3dmI7QRrD4bedNKPM08ziRYaC5AhkGrzIAJelm9kJU1TznK+apx6V+cqRz8tfpEeG3oIyjxw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.12.0.tgz",
      "integrity": "sha512-cmrR6pytBuSMTaBweKoGMwu3EiHiEC+DoyupPmlZ0HxBJBtIxwe+j/E4XPIKNx+Q74c8lXKPwYawBf5glsTkHg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "9.24.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.24.0.tgz",
      "integrity": "sha512-uIY/y3z0uvOGX8cp1C2fiC4+ZmBhp6yZWkojtHL1YEMnRt1Y63HB9TM17proGEmeG7HeUY+UP36F0aknKYTpYA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.2.8",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.2.8.tgz",
      "integrity": "sha512-ZAoA40rNMPwSm+AeHpCq8STiNAwzWLJuP8Xv4CHIc9wv/PSuExjMrmjfYNj682vW0OOiZ1HKxzvjQr9XZIisQA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.13.0",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit/node_modules/@eslint/core": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.13.0.tgz",
      "integrity": "sha512-yfkgDw1KR66rkT5A8ci4irzDysN7FRpq3ttJolR88OqQikAWqwA8j5VZyas+vjyBNFIJ7MfybJ9plMILI2UrCw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.6.tgz",
      "integrity": "sha512-YuI2ZHQL78Q5HbhDiBA1X4LmYdXCKCMQIfw0pw7piHJwyREFebJUvrQN4cMssyES6x+vfUbx1CIpaQUKYdQZOw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.3.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node/node_modules/@humanwhocodes/retry": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.3.1.tgz",
      "integrity": "sha512-JBxkERygn7Bv/GbN5Rv8Ul6LVknS+5Bp6RgDC/O8gEBU/yeH5Ui5C/OlWrTb6qct7LjjfT6Re2NxB0ln0yYybA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.2.tgz",
      "integrity": "sha512-xeO57FpIu4p1Ri3Jq/EXq4ClRm86dVF2z/+kvFnyqVYRavTZmaFaUBbWCOuuTh0o/g7DSsk6kc2vrS4Vl5oPOQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@parcel/watcher": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher/-/watcher-2.5.1.tgz",
      "integrity": "sha512-dfUnCxiN9H4ap84DvD2ubjw+3vUNpstxa0TneY/Paat8a3R4uQZDLSvWjmznAY/DoahqTHl9V46HF/Zs3F29pg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "detect-libc": "^1.0.3",
        "is-glob": "^4.0.3",
        "micromatch": "^4.0.5",
        "node-addon-api": "^7.0.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      },
      "optionalDependencies": {
        "@parcel/watcher-android-arm64": "2.5.1",
        "@parcel/watcher-darwin-arm64": "2.5.1",
        "@parcel/watcher-darwin-x64": "2.5.1",
        "@parcel/watcher-freebsd-x64": "2.5.1",
        "@parcel/watcher-linux-arm-glibc": "2.5.1",
        "@parcel/watcher-linux-arm-musl": "2.5.1",
        "@parcel/watcher-linux-arm64-glibc": "2.5.1",
        "@parcel/watcher-linux-arm64-musl": "2.5.1",
        "@parcel/watcher-linux-x64-glibc": "2.5.1",
        "@parcel/watcher-linux-x64-musl": "2.5.1",
        "@parcel/watcher-win32-arm64": "2.5.1",
        "@parcel/watcher-win32-ia32": "2.5.1",
        "@parcel/watcher-win32-x64": "2.5.1"
      }
    },
    "node_modules/@parcel/watcher-android-arm64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-android-arm64/-/watcher-android-arm64-2.5.1.tgz",
      "integrity": "sha512-KF8+j9nNbUN8vzOFDpRMsaKBHZ/mcjEjMToVMJOhTozkDonQFFrRcfdLWn6yWKCmJKmdVxSgHiYvTCef4/qcBA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-darwin-arm64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-darwin-arm64/-/watcher-darwin-arm64-2.5.1.tgz",
      "integrity": "sha512-eAzPv5osDmZyBhou8PoF4i6RQXAfeKL9tjb3QzYuccXFMQU0ruIc/POh30ePnaOyD1UXdlKguHBmsTs53tVoPw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-darwin-x64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-darwin-x64/-/watcher-darwin-x64-2.5.1.tgz",
      "integrity": "sha512-1ZXDthrnNmwv10A0/3AJNZ9JGlzrF82i3gNQcWOzd7nJ8aj+ILyW1MTxVk35Db0u91oD5Nlk9MBiujMlwmeXZg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-freebsd-x64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-freebsd-x64/-/watcher-freebsd-x64-2.5.1.tgz",
      "integrity": "sha512-SI4eljM7Flp9yPuKi8W0ird8TI/JK6CSxju3NojVI6BjHsTyK7zxA9urjVjEKJ5MBYC+bLmMcbAWlZ+rFkLpJQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm-glibc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm-glibc/-/watcher-linux-arm-glibc-2.5.1.tgz",
      "integrity": "sha512-RCdZlEyTs8geyBkkcnPWvtXLY44BCeZKmGYRtSgtwwnHR4dxfHRG3gR99XdMEdQ7KeiDdasJwwvNSF5jKtDwdA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm-musl": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm-musl/-/watcher-linux-arm-musl-2.5.1.tgz",
      "integrity": "sha512-6E+m/Mm1t1yhB8X412stiKFG3XykmgdIOqhjWj+VL8oHkKABfu/gjFj8DvLrYVHSBNC+/u5PeNrujiSQ1zwd1Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm64-glibc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm64-glibc/-/watcher-linux-arm64-glibc-2.5.1.tgz",
      "integrity": "sha512-LrGp+f02yU3BN9A+DGuY3v3bmnFUggAITBGriZHUREfNEzZh/GO06FF5u2kx8x+GBEUYfyTGamol4j3m9ANe8w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-arm64-musl": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-arm64-musl/-/watcher-linux-arm64-musl-2.5.1.tgz",
      "integrity": "sha512-cFOjABi92pMYRXS7AcQv9/M1YuKRw8SZniCDw0ssQb/noPkRzA+HBDkwmyOJYp5wXcsTrhxO0zq1U11cK9jsFg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-x64-glibc": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-x64-glibc/-/watcher-linux-x64-glibc-2.5.1.tgz",
      "integrity": "sha512-GcESn8NZySmfwlTsIur+49yDqSny2IhPeZfXunQi48DMugKeZ7uy1FX83pO0X22sHntJ4Ub+9k34XQCX+oHt2A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-linux-x64-musl": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-linux-x64-musl/-/watcher-linux-x64-musl-2.5.1.tgz",
      "integrity": "sha512-n0E2EQbatQ3bXhcH2D1XIAANAcTZkQICBPVaxMeaCVBtOpBZpWJuf7LwyWPSBDITb7In8mqQgJ7gH8CILCURXg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-win32-arm64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-win32-arm64/-/watcher-win32-arm64-2.5.1.tgz",
      "integrity": "sha512-RFzklRvmc3PkjKjry3hLF9wD7ppR4AKcWNzH7kXR7GUe0Igb3Nz8fyPwtZCSquGrhU5HhUNDr/mKBqj7tqA2Vw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-win32-ia32": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-win32-ia32/-/watcher-win32-ia32-2.5.1.tgz",
      "integrity": "sha512-c2KkcVN+NJmuA7CGlaGD1qJh1cLfDnQsHjE89E60vUEMlqduHGCdCLJCID5geFVM0dOtA3ZiIO8BoEQmzQVfpQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@parcel/watcher-win32-x64": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/@parcel/watcher-win32-x64/-/watcher-win32-x64-2.5.1.tgz",
      "integrity": "sha512-9lHBdJITeNR++EvSQVUcaZoWupyHfXe1jZvGZ06O/5MflPcuPLtEphScIBL+AiCWBO46tDSHzWyD0uDmmZqsgA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/parcel"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.40.0.tgz",
      "integrity": "sha512-+Fbls/diZ0RDerhE8kyC6hjADCXA1K4yVNlH0EYfd2XjyH0UGgzaQ8MlT0pCXAThfxv3QUAczHaL+qSv1E4/Cg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.40.0.tgz",
      "integrity": "sha512-PPA6aEEsTPRz+/4xxAmaoWDqh67N7wFbgFUJGMnanCFs0TV99M0M8QhhaSCks+n6EbQoFvLQgYOGXxlMGQe/6w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.40.0.tgz",
      "integrity": "sha512-GwYOcOakYHdfnjjKwqpTGgn5a6cUX7+Ra2HeNj/GdXvO2VJOOXCiYYlRFU4CubFM67EhbmzLOmACKEfvp3J1kQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.40.0.tgz",
      "integrity": "sha512-CoLEGJ+2eheqD9KBSxmma6ld01czS52Iw0e2qMZNpPDlf7Z9mj8xmMemxEucinev4LgHalDPczMyxzbq+Q+EtA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.40.0.tgz",
      "integrity": "sha512-r7yGiS4HN/kibvESzmrOB/PxKMhPTlz+FcGvoUIKYoTyGd5toHp48g1uZy1o1xQvybwwpqpe010JrcGG2s5nkg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.40.0.tgz",
      "integrity": "sha512-mVDxzlf0oLzV3oZOr0SMJ0lSDd3xC4CmnWJ8Val8isp9jRGl5Dq//LLDSPFrasS7pSm6m5xAcKaw3sHXhBjoRw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.40.0.tgz",
      "integrity": "sha512-y/qUMOpJxBMy8xCXD++jeu8t7kzjlOCkoxxajL58G62PJGBZVl/Gwpm7JK9+YvlB701rcQTzjUZ1JgUoPTnoQA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.40.0.tgz",
      "integrity": "sha512-GoCsPibtVdJFPv/BOIvBKO/XmwZLwaNWdyD8TKlXuqp0veo2sHE+A/vpMQ5iSArRUz/uaoj4h5S6Pn0+PdhRjg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.40.0.tgz",
      "integrity": "sha512-L5ZLphTjjAD9leJzSLI7rr8fNqJMlGDKlazW2tX4IUF9P7R5TMQPElpH82Q7eNIDQnQlAyiNVfRPfP2vM5Avvg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.40.0.tgz",
      "integrity": "sha512-ATZvCRGCDtv1Y4gpDIXsS+wfFeFuLwVxyUBSLawjgXK2tRE6fnsQEkE4csQQYWlBlsFztRzCnBvWVfcae/1qxQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.40.0.tgz",
      "integrity": "sha512-wG9e2XtIhd++QugU5MD9i7OnpaVb08ji3P1y/hNbxrQ3sYEelKJOq1UJ5dXczeo6Hj2rfDEL5GdtkMSVLa/AOg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.40.0.tgz",
      "integrity": "sha512-vgXfWmj0f3jAUvC7TZSU/m/cOE558ILWDzS7jBhiCAFpY2WEBn5jqgbqvmzlMjtp8KlLcBlXVD2mkTSEQE6Ixw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.40.0.tgz",
      "integrity": "sha512-uJkYTugqtPZBS3Z136arevt/FsKTF/J9dEMTX/cwR7lsAW4bShzI2R0pJVw+hcBTWF4dxVckYh72Hk3/hWNKvA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.40.0.tgz",
      "integrity": "sha512-rKmSj6EXQRnhSkE22+WvrqOqRtk733x3p5sWpZilhmjnkHkpeCgWsFFo0dGnUGeA+OZjRl3+VYq+HyCOEuwcxQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.40.0.tgz",
      "integrity": "sha512-SpnYlAfKPOoVsQqmTFJ0usx0z84bzGOS9anAC0AZ3rdSo3snecihbhFTlJZ8XMwzqAcodjFU4+/SM311dqE5Sw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.40.0.tgz",
      "integrity": "sha512-RcDGMtqF9EFN8i2RYN2W+64CdHruJ5rPqrlYw+cgM3uOVPSsnAQps7cpjXe9be/yDp8UC7VLoCoKC8J3Kn2FkQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.40.0.tgz",
      "integrity": "sha512-HZvjpiUmSNx5zFgwtQAV1GaGazT2RWvqeDi0hV+AtC8unqqDSsaFjPxfsO6qPtKRRg25SisACWnJ37Yio8ttaw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.40.0.tgz",
      "integrity": "sha512-UtZQQI5k/b8d7d3i9AZmA/t+Q4tk3hOC0tMOMSq2GlMYOfxbesxG4mJSeDp0EHs30N9bsfwUvs3zF4v/RzOeTQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.40.0.tgz",
      "integrity": "sha512-+m03kvI2f5syIqHXCZLPVYplP8pQch9JHyXKZ3AGMKlg8dCyr2PKHjwRLiW53LTrN/Nc3EqHOKxUxzoSPdKddA==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.40.0.tgz",
      "integrity": "sha512-lpPE1cLfP5oPzVjKMx10pgBmKELQnFJXHgvtHCtuJWOv8MxqdEIMNtgHgBFf7Ea2/7EuVwa9fodWUfXAlXZLZQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.7.tgz",
      "integrity": "sha512-w28IoSUCJpidD/TGviZwwMJckNESJZXFu7NBZ5YJ4mEUnNraUn9Pm8HSZm/jDF1pDWYKspWE7oVphigUPRakIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "20.19.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.19.1.tgz",
      "integrity": "sha512-jJD50LtlD2dodAEO653i3YF04NWak6jN3ky+Ri3Em3mGR39/glWiboM/IePaRbgwSfqM1TpGXfAg8ohn/4dTgA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/react": {
      "version": "19.1.2",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.2.tgz",
      "integrity": "sha512-oxLPMytKchWGbnQM9O7D67uPa9paTNxO7jVoNMXgkkErULBPhPARCfkKL9ytcIJJRGjbsVwW4ugJzyFFvm/Tiw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.2",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.2.tgz",
      "integrity": "sha512-XGJkWF41Qq305SKWEILa1O8vzhb3aOo3ogBlSmiqNko/WmRb6QIaweuZCXjKygVDXpzXb5wyxKTSOsmkuqj+Qw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.30.1.tgz",
      "integrity": "sha512-v+VWphxMjn+1t48/jO4t950D6KR8JaJuNXzi33Ve6P8sEmPr5k6CEXjdGwT6+LodVnEa91EQCtwjWNUCPweo+Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.30.1",
        "@typescript-eslint/type-utils": "8.30.1",
        "@typescript-eslint/utils": "8.30.1",
        "@typescript-eslint/visitor-keys": "8.30.1",
        "graphemer": "^1.4.0",
        "ignore": "^5.3.1",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.0.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.0.0 || ^8.0.0-alpha.0",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.30.1.tgz",
      "integrity": "sha512-H+vqmWwT5xoNrXqWs/fesmssOW70gxFlgcMlYcBaWNPIEWDgLa4W9nkSPmhuOgLnXq9QYgkZ31fhDyLhleCsAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.30.1",
        "@typescript-eslint/types": "8.30.1",
        "@typescript-eslint/typescript-estree": "8.30.1",
        "@typescript-eslint/visitor-keys": "8.30.1",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.30.1.tgz",
      "integrity": "sha512-+C0B6ChFXZkuaNDl73FJxRYT0G7ufVPOSQkqkpM/U198wUwUFOtgo1k/QzFh1KjpBitaK7R1tgjVz6o9HmsRPg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.30.1",
        "@typescript-eslint/visitor-keys": "8.30.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.30.1.tgz",
      "integrity": "sha512-64uBF76bfQiJyHgZISC7vcNz3adqQKIccVoKubyQcOnNcdJBvYOILV1v22Qhsw3tw3VQu5ll8ND6hycgAR5fEA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/typescript-estree": "8.30.1",
        "@typescript-eslint/utils": "8.30.1",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.0.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.30.1.tgz",
      "integrity": "sha512-81KawPfkuulyWo5QdyG/LOKbspyyiW+p4vpn4bYO7DM/hZImlVnFwrpCTnmNMOt8CvLRr5ojI9nU1Ekpw4RcEw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.30.1.tgz",
      "integrity": "sha512-kQQnxymiUy9tTb1F2uep9W6aBiYODgq5EMSk6Nxh4Z+BDUoYUSa029ISs5zTzKBFnexQEh71KqwjKnRz58lusQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.30.1",
        "@typescript-eslint/visitor-keys": "8.30.1",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.0.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/semver": {
      "version": "7.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.1.tgz",
      "integrity": "sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.30.1.tgz",
      "integrity": "sha512-T/8q4R9En2tcEsWPQgB5BQ0XJVOtfARcUvOa8yJP3fh9M/mXraLxZrkCfGb6ChrO/V3W+Xbd04RacUEqk1CFEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.4.0",
        "@typescript-eslint/scope-manager": "8.30.1",
        "@typescript-eslint/types": "8.30.1",
        "@typescript-eslint/typescript-estree": "8.30.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.30.1.tgz",
      "integrity": "sha512-aEhgas7aJ6vZnNFC7K4/vMGDGyOiqWcYZPpIWrTKuTAlsvDNKy2GFDqh9smL+iq069ZvR0YzEeq0B8NJlLzjFA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.30.1",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-4.4.0.tgz",
      "integrity": "sha512-x/EztcTKVj+TDeANY1WjNeYsvZjZdfWRMP/KXi5Yn8BoTzpa13ZltaQqKfvWYbX8CE10GOHHdC5v86jY9x8i/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.26.10",
        "@babel/plugin-transform-react-jsx-self": "^7.25.9",
        "@babel/plugin-transform-react-jsx-source": "^7.25.9",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^14.18.0 || >=16.0.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0"
      }
    },
    "node_modules/acorn": {
      "version": "8.14.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.14.1.tgz",
      "integrity": "sha512-OvQ/2pUDKmgfCg++xsTX1wGxfTaszcHVcTctW4UJB4hibJx2HXxxO5UmVgyjMa+ZDsiaf5wWLXYpRWMmBI0QHg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.24.4",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.24.4.tgz",
      "integrity": "sha512-KDi1Ny1gSePi1vm0q4oxSF8b4DR44GF4BbmS2YdhPLOEqd8pDviZOGH/GsmRwoWJ2+5Lr085X7naowMwKHDG1A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001688",
        "electron-to-chromium": "^1.5.73",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.1"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001714",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001714.tgz",
      "integrity": "sha512-mtgapdwDLSSBnCI3JokHM7oEQBLxiJKVRtg10AxM1AyeiKcM96f0Mkbqeq+1AbiCtvMcHRulAAEMu693JrSWqg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chokidar": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-4.0.3.tgz",
      "integrity": "sha512-Qgzu8kfBvo+cA4962jnP1KkS6Dop5NS6g7R5LFYJr4b8Ub94PPQXUksCw9PvXoeXPRRddRNC5C1JQUR2SMGtnA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "readdirp": "^4.0.1"
      },
      "engines": {
        "node": ">= 14.16.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.4.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.0.tgz",
      "integrity": "sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/detect-libc": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
      "integrity": "sha512-pGjwhsmsp4kL2RTz08wcOlGN83otlqHeD/Z5T8GXZB+/YcpQ/dgo+lbU8ZsGxV0HIvqqxo9l7mqYwyYMD9bKDg==",
      "dev": true,
      "license": "Apache-2.0",
      "optional": true,
      "bin": {
        "detect-libc": "bin/detect-libc.js"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.138",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.138.tgz",
      "integrity": "sha512-FWlQc52z1dXqm+9cCJ2uyFgJkESd+16j6dBEjsgDNuHjBpuIzL8/lRc0uvh1k8RNI6waGo6tcy2DvwkTBJOLDg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/esbuild": {
      "version": "0.25.2",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.2.tgz",
      "integrity": "sha512-16854zccKPnC+toMywC+uKNeYSv+/eXkevRAfwRD/G9Cleq66m8XFIrigkbvauLLlCfDL45Q2cWegSg53gGBnQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.2",
        "@esbuild/android-arm": "0.25.2",
        "@esbuild/android-arm64": "0.25.2",
        "@esbuild/android-x64": "0.25.2",
        "@esbuild/darwin-arm64": "0.25.2",
        "@esbuild/darwin-x64": "0.25.2",
        "@esbuild/freebsd-arm64": "0.25.2",
        "@esbuild/freebsd-x64": "0.25.2",
        "@esbuild/linux-arm": "0.25.2",
        "@esbuild/linux-arm64": "0.25.2",
        "@esbuild/linux-ia32": "0.25.2",
        "@esbuild/linux-loong64": "0.25.2",
        "@esbuild/linux-mips64el": "0.25.2",
        "@esbuild/linux-ppc64": "0.25.2",
        "@esbuild/linux-riscv64": "0.25.2",
        "@esbuild/linux-s390x": "0.25.2",
        "@esbuild/linux-x64": "0.25.2",
        "@esbuild/netbsd-arm64": "0.25.2",
        "@esbuild/netbsd-x64": "0.25.2",
        "@esbuild/openbsd-arm64": "0.25.2",
        "@esbuild/openbsd-x64": "0.25.2",
        "@esbuild/sunos-x64": "0.25.2",
        "@esbuild/win32-arm64": "0.25.2",
        "@esbuild/win32-ia32": "0.25.2",
        "@esbuild/win32-x64": "0.25.2"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.24.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.24.0.tgz",
      "integrity": "sha512-eh/jxIEJyZrvbWRe4XuVclLPDYSYYYgLy5zXGGxD6j8zjSAxFEzI2fL/8xNq6O2yKqVt+eF2YhV+hxjV6UKXwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.20.0",
        "@eslint/config-helpers": "^0.2.0",
        "@eslint/core": "^0.12.0",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.24.0",
        "@eslint/plugin-kit": "^0.2.7",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.3.0",
        "eslint-visitor-keys": "^4.2.0",
        "espree": "^10.3.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-5.2.0.tgz",
      "integrity": "sha512-+f15FfK64YQwZdJNELETdn5ibXEUQmW1DZL6KXhNnc2heoy/sg9VJJeT7n8TlMWouzWqSWavFkIhHyIbIAEapg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0 || ^9.0.0"
      }
    },
    "node_modules/eslint-plugin-react-refresh": {
      "version": "0.4.19",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-refresh/-/eslint-plugin-react-refresh-0.4.19.tgz",
      "integrity": "sha512-eyy8pcr/YxSYjBoqIFSrlbn9i/xvxUFa8CjzAYo9cFjgGXqq1hyjihcpZvxRLalpaWmueWR81xn7vuKmAFijDQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "eslint": ">=8.40"
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.3.0.tgz",
      "integrity": "sha512-pUNxi75F8MJ/GdeKtVLSbYg4ZI34J6C0C7sbL4YOp2exGwen7ZsuBqKzUhXd0qMQ362yET3z+uPwKeg/0C2XCQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.0.tgz",
      "integrity": "sha512-UyLnSehNt62FFhSwjZlHmeokpRK59rcz29j+F1/aDgbkbRTk7wIc9XzdoasMUbRNKDM0qQt/+BJ4BrpFeABemw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.3.0.tgz",
      "integrity": "sha512-0QYC8b24HWY8zjRnDTL6RiHfDbAWn63qb4LMj1Z4b076A4une81+z03Kg7l7mn/48PUTqoLptSXez8oknU8Clg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.14.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/globals": {
      "version": "16.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-16.0.0.tgz",
      "integrity": "sha512-iInW14XItCXET01CQFqudPOWP2jYMl7T+QRQT+UNcR/iQncN/F0UNpgd76iFkBPgNQb4+X3LV9tLJYzwh+Gl3A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immutable": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/immutable/-/immutable-5.1.3.tgz",
      "integrity": "sha512-+chQdDfvscSF1SJqv2gn4SRO2ZyS3xL3r7IW/wWEEzrzLisnOlKiQu5ytC/BVNcS15C39WT2Hg/bjKjDMcu+zg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-addon-api": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-7.1.1.tgz",
      "integrity": "sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.3",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.3.tgz",
      "integrity": "sha512-dle9A3yYxlBSrt8Fu+IpjGT8SY8hN0mlaA6GY8t0P5PjIOZemULz/E2Bnm/2dcUOena75OTNkHI76uZBNUUq3A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.8",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/react": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.0.tgz",
      "integrity": "sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.0.tgz",
      "integrity": "sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==",
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.0"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/readdirp": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-4.1.2.tgz",
      "integrity": "sha512-GDhwkLfywWL2s6vEjyhri+eXmfH6j1L7JE27WhqLeYzoh/A3DBaYGEj2H/HFZCn/kMfim73FXxEJTw06WtxQwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 14.18.0"
      },
      "funding": {
        "type": "individual",
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.40.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.40.0.tgz",
      "integrity": "sha512-Noe455xmA96nnqH5piFtLobsGbCij7Tu+tb3c1vYjNbTkfzGqXqQXG3wJaYXkRZuQ0vEYN4bhwg7QnIrqB5B+w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.7"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.40.0",
        "@rollup/rollup-android-arm64": "4.40.0",
        "@rollup/rollup-darwin-arm64": "4.40.0",
        "@rollup/rollup-darwin-x64": "4.40.0",
        "@rollup/rollup-freebsd-arm64": "4.40.0",
        "@rollup/rollup-freebsd-x64": "4.40.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.40.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.40.0",
        "@rollup/rollup-linux-arm64-gnu": "4.40.0",
        "@rollup/rollup-linux-arm64-musl": "4.40.0",
        "@rollup/rollup-linux-loongarch64-gnu": "4.40.0",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.40.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.40.0",
        "@rollup/rollup-linux-riscv64-musl": "4.40.0",
        "@rollup/rollup-linux-s390x-gnu": "4.40.0",
        "@rollup/rollup-linux-x64-gnu": "4.40.0",
        "@rollup/rollup-linux-x64-musl": "4.40.0",
        "@rollup/rollup-win32-arm64-msvc": "4.40.0",
        "@rollup/rollup-win32-ia32-msvc": "4.40.0",
        "@rollup/rollup-win32-x64-msvc": "4.40.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/sass": {
      "version": "1.89.2",
      "resolved": "https://registry.npmjs.org/sass/-/sass-1.89.2.tgz",
      "integrity": "sha512-xCmtksBKd/jdJ9Bt9p7nPKiuqrlBMBuuGkQlkhZjjQk3Ty48lv93k5Dq6OPkKt4XwxDJ7tvlfrTa1MPA9bf+QA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^4.0.0",
        "immutable": "^5.0.2",
        "source-map-js": ">=0.6.2 <2.0.0"
      },
      "bin": {
        "sass": "sass.js"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "optionalDependencies": {
        "@parcel/watcher": "^2.4.1"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.12",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.12.tgz",
      "integrity": "sha512-qkf4trmKSIiMTs/E63cxH+ojC2unam7rJ0WrauAzpT3ECNTxGRMlaXxVbfxMUC/w0LaYk6jQ4y/nGR9uBO3tww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.3",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.4.3",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.3.tgz",
      "integrity": "sha512-PMXmW2y1hDDfTSRc9gaXIuCCRpuoz3Kaz8cUelp3smouvfT632ozg2vrT6lJsHKKOF59YLbOGfAWGUcKEfRMQw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.7.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.7.3.tgz",
      "integrity": "sha512-84MVSjMEHP+FQRPy3pX9sTVV/INIex71s9TL2Gm5FG/WG1SqXeKyZ0k7/blY/4FdOzI12CBy1vGc4og/eus0fw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.30.1",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.30.1.tgz",
      "integrity": "sha512-D7lC0kcehVH7Mb26MRQi64LMyRJsj3dToJxM1+JVTl53DQSV5/7oUGWQLcKl1C1KnoVHxMMU2FNQMffr7F3Row==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.30.1",
        "@typescript-eslint/parser": "8.30.1",
        "@typescript-eslint/utils": "8.30.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <5.9.0"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/vite": {
      "version": "6.3.2",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.2.tgz",
      "integrity": "sha512-ZSvGOXKGceizRQIZSz7TGJ0pS3QLlVY/9hwxVh17W3re67je1RKYzFHivZ/t0tubU78Vkyb9WnHPENSBCzbckg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.3",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.3",
        "rollup": "^4.34.9",
        "tinyglobby": "^0.2.12"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.4.3",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.3.tgz",
      "integrity": "sha512-PMXmW2y1hDDfTSRc9gaXIuCCRpuoz3Kaz8cUelp3smouvfT632ozg2vrT6lJsHKKOF59YLbOGfAWGUcKEfRMQw==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.2.tgz",
      "integrity": "sha512-M7BAV6Rlcy5u+m6oPhAPFgJTzAioX/6B0DxyvDlo9l8+T3nLKbrczg2WLUyzd45L8RqfUMyGPzekbMvX2Ldkwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}

```

Filename: tsconfig.json

```json
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

```

Filename: tsconfig.app.json

```json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

```

Filename: tsconfig.node.json

```json
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,
    "types": ["node"],

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

```

Filename: vite.config.ts

```ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  base: process.env.NODE_ENV === 'production' ? '/foodinator/' : '/', // Base path: GitHub Pages in prod, root in dev
})

```

Filename: eslint.config.js

```javascript
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

```

Filename: index.html

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#DE6052" />
    <meta name="description" content="Plan your weekly meals and automatically generate grocery lists with Foodinator" />
    <link rel="manifest" href="manifest.json" />
    <link rel="apple-touch-icon" sizes="180x180" href="apple-touch-icon.png">
    <title>Foodinator | Weekly Meal & Grocery Planner</title>
    <!-- Start Single Page Apps for GitHub Pages -->
    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      // MIT License
      // https://github.com/rafgraph/spa-github-pages
      // This script checks to see if a redirect is present in the query string,
      // converts it back into the correct url and adds it to the
      // browser's history using window.history.replaceState(...),
      // which won't cause the browser to attempt to load the new url.
      // When the single page app is loaded further down in this file,
      // the correct url will be waiting in the browser's history for
      // the single page app to route accordingly.
      (function(l) {
        if (l.search[1] === '/' ) {
          var decoded = l.search.slice(1).split('&').map(function(s) { 
            return s.replace(/~and~/g, '&')
          }).join('?');
          window.history.replaceState(null, null,
              l.pathname.slice(0, -1) + decoded + l.hash
          );
        }
      }(window.location))
    </script>
    <!-- End Single Page Apps for GitHub Pages -->
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

```

Filename: .gitignore

```
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local
combine

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

```

---BEGIN_COMMENT---
Documentation
---END_COMMENT---

Filename: README.md

```
# Foodinator

A weekly meal and grocery planner app built with React and TypeScript.

![Foodinator App](public/screenshot.png)

## Features

- **Weekly Meal Planning**: Plan your weekly meals by selecting from a list of available recipes
- **Automatic Grocery Lists**: Generate a grocery list based on your meal selections
- **Meal Scheduling**: Rearrange your meals in the schedule view with drag-and-drop functionality
- **Ingredient Search**: Find meals by searching for specific ingredients
- **Grocery List Management**: Sort and filter your grocery list, mark items as purchased
- **Persistent Storage**: All your data is saved locally in your browser
- **Mobile-Friendly Design**: Works great on both desktop and mobile devices

## Live Demo

Check out the live demo at [https://yourusername.github.io/foodinator/](https://yourusername.github.io/foodinator/)

## Tech Stack

- **React**: UI library
- **TypeScript**: Type safety
- **Vite**: Build tool
- **CSS**: Styling (no external UI libraries)
- **LocalStorage**: For data persistence

## Project Structure

```
src/
├── assets/         # Static assets like images
├── components/     # React components
├── hooks/          # Custom React hooks
├── models/         # TypeScript interfaces and data
├── styles/         # CSS styles
├── utils/          # Utility functions
├── App.tsx         # Main application component
└── main.tsx        # Application entry point
```

## Development

### Prerequisites

- Node.js (v18 or higher)
- npm (v9 or higher)

### Installation

1. Clone the repository
   ```
   git clone https://github.com/yourusername/foodinator.git
   cd foodinator
   ```

2. Install dependencies
   ```
   npm install
   ```

3. Start the development server
   ```
   npm run dev
   ```

4. Open your browser and navigate to `http://localhost:5173/foodinator/`

### Building for Production

```
npm run build
```

The built files will be in the `dist` directory.

## Deployment

This project is configured to deploy automatically to GitHub Pages using GitHub Actions.

### Setting up GitHub Pages

1. Push your code to GitHub
2. The GitHub Actions workflow will attempt to automatically enable GitHub Pages for your repository
3. If the workflow fails with a "Pages not enabled" error, you'll need to manually enable it:
   - Go to your repository on GitHub
   - Go to Settings > Pages
   - Under "Source", select "GitHub Actions" as the source
4. After GitHub Pages is enabled, re-run the failed workflow:
   - Go to the Actions tab
   - Click on the failed workflow run
   - Click "Re-run all jobs" button
5. Once the workflow completes successfully, your site will be available at `https://yourusername.github.io/foodinator/`

**Note:** Make sure to update the `homepage` field in `package.json` with your actual GitHub username before pushing to GitHub.

### Manual Deployment

You can also trigger a deployment manually:

1. Go to your repository on GitHub
2. Go to the Actions tab
3. Select the "Deploy to GitHub Pages" workflow
4. Click "Run workflow"

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## Future Improvements

- Add ability to create and edit custom meals
- Implement meal categories and filtering
- Add nutritional information for meals and ingredients
- Implement user accounts for data syncing across devices
- Add meal rating system
- Implement meal suggestions based on past selections

## License

MIT

```

Filename: OFFLINE_FEATURES.md

```
# Foodinator - Offline Features

This document describes the offline capabilities that have been added to the Foodinator PWA.

## 🚀 What's New

Your Foodinator app now works completely offline! You can access all your meal plans, grocery lists, and schedules even when you have no internet connection - perfect for when you're in the supermarket with poor signal.

## 📱 Offline Capabilities

### ✅ What Works Offline
- **Full App Functionality**: All tabs (Planner, Schedule, Grocery) work offline
- **Data Persistence**: Your meal plans, grocery lists, and preferences are saved locally
- **Image Caching**: All meal images are cached for offline viewing
- **App Shell**: The entire app interface loads instantly offline
- **Real-time Updates**: Changes are saved immediately to local storage

### 🔄 Smart Sync Features
- **Background Sync**: When you come back online, any changes sync automatically
- **Update Notifications**: Get notified when new app versions are available
- **Cache-First Strategy**: App loads instantly from cache, then updates in background
- **Network Status**: Visual indicator shows when you're offline

## 🛠 Technical Implementation

### Service Worker
- Caches all static assets (HTML, CSS, JS, images)
- Implements cache-first strategy for instant loading
- Handles background sync for data updates
- Manages app updates and version control

### Data Storage
- **localStorage**: Primary storage for user data
- **Service Worker Cache**: Backup storage for offline access
- **Background Sync**: Queues changes when offline for later sync

### Caching Strategy
- **Static Assets**: Cache-first with background update
- **App Shell**: Cached permanently, updated on app updates
- **User Data**: Stored in localStorage + service worker cache
- **Images**: Cached on first load, served offline thereafter

## 🎯 User Experience

### Offline Indicator
- Shows when you're offline with cached data available
- Displays update notifications when new versions are ready
- Provides manual update check button

### Seamless Experience
- No difference between online/offline usage
- Instant app loading from cache
- All features work identically offline
- Data syncs automatically when connection returns

## 🔧 For Developers

### Key Files Added/Modified
- `public/sw.js` - Service worker for caching and offline functionality
- `src/hooks/useOffline.ts` - React hooks for offline state management
- `src/components/OfflineStatus.tsx` - UI component for offline status
- `src/hooks/useLocalStorage.ts` - Enhanced localStorage with caching
- `public/manifest.json` - Updated PWA manifest with shortcuts

### Hooks Available
```typescript
// Monitor online/offline status and manage updates
const { isOnline, isOfflineReady, hasUpdate, checkForUpdates, forceUpdate } = useOffline();

// Background sync for data changes
const { pendingSyncs, registerSync } = useBackgroundSync();

// Cache data in service worker
const { cacheData, getCachedData } = useDataCache();

// Enhanced localStorage with offline sync
const { value, setValue, markAsSynced, getSyncStatus } = useOfflineLocalStorage(key, initialValue);
```

### Service Worker Events
- `install` - Cache static assets
- `activate` - Clean up old caches
- `fetch` - Serve cached content offline
- `sync` - Handle background data sync
- `message` - Communicate with main app

## 📋 Testing Offline Functionality

### Chrome DevTools
1. Open DevTools (F12)
2. Go to Application tab
3. Click "Service Workers" to see registration status
4. Use "Offline" checkbox to simulate offline mode
5. Check "Cache Storage" to see cached resources

### Real-World Testing
1. Load the app online first (to cache resources)
2. Turn off WiFi/mobile data
3. Refresh the app - it should load instantly
4. Use all features normally
5. Turn connection back on - changes sync automatically

## 🚀 Deployment Notes

### GitHub Pages
The app is configured to work with GitHub Pages deployment:
- Service worker paths are relative to root
- All static assets are properly cached
- 404.html handles client-side routing

### Cache Versioning
- Cache names include version numbers
- Old caches are automatically cleaned up
- Users get prompted for updates when available

## 🔮 Future Enhancements

Potential improvements for even better offline experience:
- IndexedDB for more complex data storage
- Periodic background sync for automatic updates
- Push notifications for meal reminders
- Export/import functionality for data backup
- Conflict resolution for simultaneous edits

## 🐛 Troubleshooting

### App Not Working Offline
1. Check if service worker is registered (DevTools > Application > Service Workers)
2. Verify cache storage has content (DevTools > Application > Cache Storage)
3. Try hard refresh (Ctrl+Shift+R) to re-register service worker

### Updates Not Showing
1. Use "Check for Updates" button in offline status bar
2. Clear cache and reload if needed
3. Check console for service worker errors

### Data Not Syncing
1. Verify network connection is restored
2. Check browser console for sync errors
3. Background sync may take a few moments to trigger

---

Your Foodinator app is now a true offline-first PWA! 🎉

```

---BEGIN_COMMENT---
Please assess my implementation so far
---END_COMMENT---

